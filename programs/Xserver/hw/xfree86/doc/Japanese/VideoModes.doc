  XFree86 ビデオ情報 HOWTO
  Eric S. Raymond <esr@thyrsus.com>
  Version 3.0, 8 Aug 1997
  岡本 一幸 Kazuyuki Okamoto <ikko-@pacific.rim.or.jp>
  Hiro Sugawara <hiro@arkusa.com>

  XFree86 においてお手元のカードやモニタの組み合わせでどのように mode 行
  を作成するかを説明します。 XFree86 配布物は現在ほとんどの標準的な組み
  合わせに関して構成できる素晴らしい機能を持っています。この文書は主に
  mode 行をより高性能なモニタや使えそうもないハードウェア向けにカスタマ
  イズして調整したい場合に有効です。また、xvidtune を使ってお手元のモニ
  タにまったく合わない標準的な mode 行を変更するのに助けになるでしょう。
  ______________________________________________________________________

  目次

  1. 責任放棄声明
  2. 序文
  3. ビデオディスプレイの動作原理
  4. ディスプレイとアダプタについての基礎知識
     4.1 モニタのビデオ信号帯域幅 :
     4.2 どうやって制御するか :

  5. 基本仕様の読み方
     5.1 帯域幅について :
     5.2 同期周波数と再描画速度 :

  6. システムの構成におけるトレードオフ
  7. 要求メモリ量
  8. フレームサイズの計算
  9. 黒魔術と同期信号
     9.1 水平同期 :
     9.2 垂直同期 :

  10. 全体のまとめ
  11. モニタの仕様外使用
  12. インタレースモードを使用する
  13. 質疑応答
  14. 画像表示の問題修正
     14.1 画像が左か右にずれている場合
     14.2 画像が上下に動いている場合
     14.3 画像が垂直と水平の両方に膨らんでいる場合
     14.4 画像が水平方向に広すぎる (狭すぎる) 場合
     14.5 画像が垂直方向に膨らんでいる (痩せている) 場合

  15. モニタの特性をプロットする。
  16. 協力者、提供者について
  17. 日本語訳について

  ______________________________________________________________________

  1.  責任放棄声明

  ここにある資料は単にご自身の責任で使用してください。製造会社の仕様外の
  仕様で使用した場合モニタとご自身の両方に危害を与える可能性があります。
  詳細な警告については ``モニタの仕様外使用'' を読んでください。

  この HOWTO の最新版は Linux Documentation Project
  <http://sunsite.unc.edu/LDP> のウェブのページにあります。

  改良のための率直なご批評、ご批判やご提案は esr@snark.thyrsus.com まで
  お願いします。私の時間を無駄にし、あなたをいらいらさせるようなご自身の
  モニタの特殊な問題について、すてきな回答を嘆願するような電子メールは送
  付しないでください。この問題について私の知っていることの全ては、すでに
  ここにあります。

  2.  序文

  ユーザは XFree86 サーバを自分のビデオサブシステムに合わせてハードウェ
  アを使いこなすように構成出来ます。この手引き書は自分自身のビデオカード
  とモニタの最適な時間調節の数値を、如何に生成するか勉強する助けになるで
  しょう。

  ここではまず XFree86 サーバを何とか動かすための方法を提示し、それを基
  礎に実験をしながらいろいろと設定を変更して自分の好みに最適化するための
  やり方を説明します。

  XFree86 3.2 からはじめる場合、XFree86 は 直接にビデオ情報の調整数値を
  意識させずに、動作するモニタの モード を対話的に簡単に作成する
  XF86Setup(1) プログラムを提供しています。したがって、実際に基礎となる
  モニタの モード はほとんどの場合、計算する必要はありません。残念ながら
  XF86Setup(1) に幾つかの制限があり、1280x1024 までの標準的なビデオの モ
  ード についてしか知りません。とても高性能な 1600x1200 若しくはそれ以上
  が可能なモニタを持っている場合は、未だに自分自身で基礎となるモニタの
  モード を計算しなければいけません。

  最近の XFree86 は xvidtune(1) と呼ばれるモニタの モード のテストとチュ
  ーニングに多分かなり使えるツールを提供しています。このツールは間違えて
  使った時の結果についてものすごい警告を出して起動します。この文書に慎重
  な注意を払い、xvidtune の箱の中のかなりの数値の背後にあるものについて
  学習しましょう。そうすれば xvidtune を効果的に安心して使えるようになり
  ます。

  ほとんど動作しているモードを持っている場合は (特に、前もって設定してい
  る VESA モードは左右に片寄ったり、小さすぎたり、大きすぎたりするでしょ
  うが、安定しているでしょう) 、さっそく ``画像表示の問題修正'' の節から
  始めてください。この節は調整数値をちょうど良い数値に近づける方法を教え
  てくれるでしょう。

  xvidtune(1) を持っている場合、X の構成情報ファイルの変更しないでまた
  は、X サーバの再起動なしに、そのままの状態で新しいモードのテストが出来
  ます。他に XFree86 はホットキーで Xconfig ファイル に定義されている異
  なるモード間を移動できます (詳細については XFree86.man を参照してくだ
  さい) 。これは困った事態から自分を守るとても便利な機能です。新しいモー
  ドを試してみたくなったら、新しいモードを重複しないモードラベルを付けて
  ホットキーリストの 最後 に追加してください。新しいモードが動かなかった
  ときの保険に、既に動いているモードは標準値として残しておいてください。

  3.  ビデオディスプレイの動作原理

  ビデオディスプレイの動作原理を知ることは Xconfig ファイルの色々な場所
  にどんな数字を入れるかを理解する上で重要です。これらの値は XFree86 サ
  ーバがディスプレイをハードウェアレベルで制御するのに使用されます。

  ディスプレイはドットの集まりから画像を表示します。このドットを左から右
  へ並べて線を作ります。この線を上から下へ並べて画像を作ります。ドットは
  ディスプレイ内部からの電子ビームで叩かれたとき発光します。それぞれの
  ドットに均一に電子ビームを当てるために、一定のパターンでディスプレイ上
  を走査します。

  そのパターンはスクリーンの左上から始まり、右へ真直ぐスクリーンを横切る
  ように走り、スクリーンの右端で一旦停止します。そして電子ビームはディス
  プレイの左端に移動し、一本下に移動します。新しい線はディスプレイの左か
  ら右へ最初の線を引いたように走査します。このパターンをディスプレイの一
  番下まで繰り返します。それから電子ビームがディスプレイの左上から右下ま
  で移動したら、また最初から繰り返します。

  この機能の別の種類にインタレースというのが知られています。:これはすべ
  ての第 2 の線がフレームの半分を操作している間にほかの線がもう半分の第
  2 のフレームを満たすような機構です。
  [訳注 : 一本おきにそれぞれの線がフレームを走査します。]

  フレームの始まりはディスプレイの左上の電子ビームの開始点です。電子ビー
  ムがディスプレイの右下隅まで届いてから左上隅に再び戻ってくる時がフレー
  ムの終了点です。フレームはディスプレイの一番上から一番下までの全ての電
  子ビームの線で出来ています。

  もし電子ビームがフレームを移動している間ずっと「オン」だったら、ディス
  プレイの全てのドットは点灯してしまい、ディスプレイの縁には黒い部分はな
  くなるでしょう。そしてディスプレイの縁では、電子ビームの制御が難しいの
  で画像が歪曲してしまうでしょう。この歪みを減らすため、ディスプレイの縁
  のドットには、電子ビームが届いても、ドットが輝かないようになっていま
  す。ディスプレイの実際に表示される領域が小さくなっているのは、こういう
  わけなのです。

  もう一つ理解してほしい重要なことは、表示される領域を描画していない時に
  電子ビームがどうなっているかということです。ディスプレイの横端を描画す
  るために使われるはずだった時間は、電子ビームを右の端から左の端まで戻
  し、一つ下の次のラインに移動するために使われます。ディスプレイの上端お
  よび下端を描画するために掛かるはずだった時間は、電子ビームをディスプレ
  イの右下隅から左上隅まで移動するために使われます。

  アダプタカードはディスプレイの電子銃を点灯させ全てのドットで画像を生成
  するような信号を作成します。また、カードは電子ビームが右から左に移動し
  て一本下がるときに水平同期信号と呼ばれる信号を作成します。すべてのライ
  ンの最後に一つの水平同期信号が発生します。さらに、アダプタカードは電子
  ビームをディスプレイの左上隅に移動するための垂直同期信号も生成します。
  垂直同期信号は全てのフレームの終わり近くに作成されます。

  ディスプレイには、電子ビームの位置を安定させるため、水平同期信号と垂直
  同期信号の前後に短時間の余裕が必要です。電子ビームの安定化が出来ない
  と、画像がしっかりしません。

  以降の節で、定義、公式と例題の補助のために、これらの基本に戻るでしょ
  う。

  4.  ディスプレイとアダプタについての基礎知識

  Xconfig の設定項目をさわる前に、次の基礎的な事項を知っておく必要があり
  ます。

  o  モニタの水平同期信号と垂直同期信号の周波数

  o  ビデオアダプタの動作クロック周波数、または"ドットクロック"

  o  モニタの周波数帯幅

     モニタの同期周波数 :

  モニタの水平同期周波数は、そのモニタが 1 秒間に書ける水平走査線の数の
  ことで、これはモニタについて最も重要な統計値です。垂直同期周波数は、そ
  のモニタが 1 秒間に電子ビームを縦方向に通過させることのできる回数のこ
  とです。

  同期周波数は普通、モニタのマニュアルの仕様の頁に一覧になっています。垂
  直同期周波数の数値は一般的に Hz (秒当たりの単位周期) で、水平同期周波
  数は KHz (秒当たりの千単位周期) で計測されています。通常の範囲は垂直に
  ついては 50 から 150Hz、水平については 31 から 135KHz 程度です。
  マルチシンクモニタの場合、その周波数は幅のある値として表示されていま
  す。下位のものに多いのですが、複数の固定した周波数を持っているモニタも
  あります。このようなモニタも普通のモニタと同様に設定は出来ますが、モニ
  タの持つ特徴に厳しく制限されてしまうでしょう。最高の解像度が得られるよ
  うな最も高い水平同期と垂直同期周波数の組み合わせを選択してください。そ
  して、固定周波数モニタでは設計値より高い周波数を与えるとモニタを痛める
  おそれがあるので注意してください。

  この文書の初期の版では、より良い性能を得るための名目上の最高の垂直同期
  周波数を指定したマルチシンクモニタの仕様外使用にかなり無頓着でした。こ
  の警告に対する根拠を指摘できる理由を手にいれました。以降の ``モニタの
  仕様外使用'' で言及します。

  カードの駆動クロックの周波数 :

  ビデオアダプタの仕様書にカードのドットクロックがあります (ドットクロッ
  クとは画面へ 1 秒間に点を表示できる総数です) 。この情報が無い場合は、X
  サーバがそれを取ってきます。X がモニタを固めてしまった場合でも、クロッ
  クとその他の情報を標準出力に吐き出します。この情報をファイルにリダイレ
  クトした場合、コンソールへ戻って再立ち上げしなければならなくなっても
  ファイルに保存されます。(最近の X サーバ ではすべて、クロックとその他
  の情報を出力し X を実際に起動しないでビデオモードも変更しない
  -probeonly オプションをサポートしています。)

  X の開始時のメッセージは次のような例題に似ているでしょう。:

  XFree86 を使用している場合は:

       Xconfig: /usr/X11R6/lib/X11/Xconfig
       (**) stands for supplied, (--) stands for probed/default values
       (**) Mouse: type: MouseMan, device: /dev/ttyS1, baudrate: 9600
       Warning: The directory "/usr/andrew/X11fonts" does not exist.
                Entry deleted from font path.
       (**) FontPath set to "/usr/lib/X11/fonts/misc/,/usr/lib/X11/fonts/75dpi/"
       (--) S3: card type: 386/486 localbus
       (--) S3: chipset:   924
                           ---
           チップセット -- これは正確なチップの型式です。86C911 の前のものです。

       (--) S3: chipset driver: s3_generic
       (--) S3: videoram:  1024k
                           -----
                フレームバッファメモリの大きさです。

       (**) S3: clocks:  25.00  28.00  40.00   3.00  50.00  77.00  36.00  45.00
       (**) S3: clocks:   0.00   0.00  79.00  31.00  94.00  65.00  75.00  71.00
                         ------------------------------------------------------
                                     動作可能な周波数を MHz で表します。

       (--) S3: Maximum allowed dot-clock: 110MHz
                                           ------
                                           帯域幅
       (**) S3: Mode "1024x768": mode clock =  79.000, clock used =  79.000
       (--) S3: Virtual resolution set to 1024x768
       (--) S3: Using a banksize of 64k, line width of 1024
       (--) S3: Pixmap cache:
       (--) S3: Using 2 128-pixel 4 64-pixel and 8 32-pixel slots
       (--) S3: Using 8 pages of 768x255 for font caching

  SGCS X または X/Inside X を使っている場合は:

       WGA: 86C911 (mem: 1024k clocks: 25 28 40 3 50 77 36 45 0 0 79 31 94 65 75 71)
       ---  ------       -----         --------------------------------------------
        |     |            |                 動作可能な周波数を MHz で表わします。
        |     |            +-- ボード上のフレームバッファメモリの大きさ
        |     +-- チップの型式
        +-- サーバの種類

  注意: なるべくこの作業はマシンの負荷が低い時に行なって下さい。X はアプ
  リケーションですから、ディスクの動作と時間調節のループが衝突すると、上
  記の数字は不正確になります。何回か繰り返し実行し、数字が大きく変動しな
  いことを確かめて下さい。もし変動が大きい場合には、安定するまでプロセス
  を殺してみてください。SVr4 (システム V リリース 4)  を使用している人
  へ: mousemgr (マウスマネージャ) プロセスは特に混乱の元です。

  このような不正確さを避けるため、得られたクロックの数字をそのまま
  Clocks プロパティの値として Xconfig に取り込んで下さい。これは時間調節
  のループを抑止し、X が試してみることのできるクロックの値の正確な一覧を
  与えるためです。上記の例のデータを使うと、次のようになります。:

       wga
               Clocks  25 28 40 3 50 77 36 45 0 0 79 31 94 65 75 71

  高く変わりやすい負荷が掛かったシステムでは、この方法は X の起動時に陥
  ることがある不思議な失敗を回避する助けになるでしょう。X が起動した時シ
  ステムの負荷のせいで間違った値を得てしまい、config データベースから丁
  度いいドットクロックを見つけることが出来なかったり、間違ったものを見つ
  けてしまうことがあり得るのです。

  4.1.  モニタのビデオ信号帯域幅 :

  XFree86 を実行する場合は、サーバがカードを探知して使用可能な最高のドッ
  トクロックを教えてくれます。

  さもなければ、最高の使用可能なドットクロックをモニタのビデオ信号帯域幅
  から概算しましょう。ここで与えるものが多いですが、例えば、名目上の帯域
  幅の 30% 増しで動作できるモニタもあります。そのモニタの限度を越えた垂
  直同期周波数を用いることでかかるリスクについて以降で詳細に論じます。

  帯域幅を知ることで可能な構成定義からより賢い選択ができるようになりま
  す。あなたのディスプレイの表示品質 (特に高精細のためのシャープさ) に影
  響を及ぼします。

  モニタのビデオ信号帯域幅はマニュアルの仕様の頁に載っています。無かった
  場合は、モニタの最も高い解像度のところを見てください。解像度から帯域幅
  (つまり使用できるドットクロックの大まかな上限値) を推定するための経験
  則を下に示します。

               640x480                 25
               800x600                 36
               1024x768                65
               1024x768 interlaced     45
               1280x1024               110
               1600x1200               185

  ところで、この表は絶対的なものではありません。これらの数字は標準的な
  XFree86 モードデータベースでの解像度毎の最も低いドットクロックです(私
  が補間した最後のものを除く)。モニタの帯域幅は一番上の解像度に要求され
  る最小の帯域幅より高いでしょうから、恐れずにドットクロックを数 MHz 高
  めに試してみてください。

  また、ドットクロックが 65MHz 位より低い場合には帯域幅はほとんど問題に
  ならないことに注意してください。SVGA やほとんどの高解像度のモニタで
  は、これはモニタのビデオ信号帯域幅の限界よりもはるかに低い周波数ですか
  ら。次に例を示します。:

               ブランド名                      ビデオ信号帯域幅
               ----------                      ---------------
               NEC 4D                          75Mhz
               Nano 907a                       50Mhz
               Nano 9080i                      60Mhz
               Mitsubishi HL6615               110Mhz
               Mitsubishi Diamond Scan         100Mhz
               IDEK MF-5117                    65Mhz
               IOCOMM Thinksync-17 CM-7126     136Mhz
               HP D1188A                       100Mhz
               Philips SC-17AS                 110Mhz
               Swan SW617                      85Mhz
               Viewsonic 21PS                  185Mhz

  一番下のクラスのモニタでも、解像度に関して非常にビデオ信号帯域幅に制約
  を受けることはありません。NEC マルチシンク II が良い例です (仕様によれ
  ば 800x600は表示出来ない) 。そのディスプレイは 800x560 のみ表示できま
  す。このような低解像度の場合は、高いドットクロックや大きなビデオ信号帯
  域幅を必要とせず、多分 32Mhz か 36Mhz で十分で、両方の周波数ともモニタ
  のビデオ信号帯域幅である30Mhz からそれ程かけ離れた値ではありません。

  これら 2 つの動作周波数では、ディスプレイの持っている性能よりくっきり
  と表示しないかもしれませんが、でもかなりの品質だと言い切ってもいいで
  しょう。勿論、NEC マルチシンク II がもっと高い、例えば 36MHz ビデオ信
  号帯域幅を持っているに越したことはありません。しかし、大きく画像が歪む
  程周波数がかけ離れていなければ、文章を編集する等の一般的な作業には問題
  はありません。 (もし画像の歪みがあまりにも大きい場合には、目で見てすぐ
  わかるでしょう) 。

  4.2.  どうやって制御するか :

  モニタの同期信号帯域幅は、ビデオアダプタのドットクロックと共に、表示で
  きる最高の解像度を決定します。しかしハードウェアの性能を引き出すのはド
  ライバです。どんなに優れたビデオアダプタやモニタでも、良いデバイスドラ
  イバがなければ宝の持ち腐れになってしまいます。一方、有能でないハードで
  も多目的に使用できるデバイスドライバがあれば十分役に立ちます。これが
  XFree86 の設計哲学です。

  5.  基本仕様の読み方

  この節では仕様が何を意味するかと、その他知らなければならないことを説明
  します。先ず最初に、定義をします。次に計算をする時に使う変数名を括弧内
  で示します。
  [訳注 : この定義だけは対訳風にします。]

     horizontal sync frequency (HSF)
        Horizontal scans per second (see above).

     水平同期周波数 (HSF)
        毎秒の水平走査数 (上記参照) 。

     vertical sync frequency (VSF)
        Vertical scans per second (see above).  Mainly important as the
        upper limit on your refresh rate.

     垂直同期周波数 (VSF)
        毎秒の垂直走査数 (上記参照) 。主に再描画速度の上限として重要。

     dot clock (DCF)
        More formally, `driving clock frequency'; The frequency of the
        crystal or VCO on your adaptor --- the maximum dots-per-second
        it can emit.

     ドットクロック (DCF)
        より正式には、`駆動クロック周波数'; 時々適当に`帯域幅'と呼ぶ。ア
        ダプタの発信子または VCO の周波数 --- 毎秒描画可能ドット数の最
        大。

     video bandwidth (VB)
        The highest frequency you can feed into your monitor's video
        input and still expect to see anything discernible. If your
        adaptor produces an alternating on/off pattern, its lowest
        frequency is half the DCF, so in theory bandwidth starts making
        sense at DCF/2. For tolerably crisp display of fine details in
        the video image, however, you don't want it much below your
        highest DCF, and preferably higher.

     ビデオ信号帯域幅 (VB)
        モニタのビデオ入力に注ぎ込み、識別できる何かが見える事を期待する
        ことが出来る最高の周波数。アダプタがオンオフ切り替えのパターンを
        生成した場合、最低の周波数は DCF の半分になります。したがって理
        論上の帯域幅は DCF/2 から始めることができると思います。精細な詳
        細のくっきりした表示を我慢するならば、最高の DCF を欲しがらない
        で、お好みで高めにしておきましょう。

     frame length (HFL, VFL)
        Horizontal frame length (HFL) is the number of dot-clock ticks
        needed for your monitor's electron gun to scan one horizontal
        line, including the inactive left and right borders.  Vertical
        frame length (VFL) is the number of scan lines in the entire
        image, including the inactive top and bottom borders.

     フレーム長 (HFL, VFL)
        水平フレーム長 (HFL) はモニタの電子銃が 1 つの使われていない左右
        の境界を含む水平線を走査するのに必要なドットクロックの数。垂直フ
        レーム長 (VFL)は使われていない上と下の境界を含む完全な画面の走査
        線の数です。

     screen refresh rate (RR)
        The number of times per second your screen is repainted (this is
        also called "frame rate").  Higher frequencies are better, as
        they reduce flicker.  60Hz is good, VESA-standard 72Hz is
        better.  Compute it as

             RR = DCF / (HFL * VFL)

     画面再描画速度 (RR)
        毎秒の画面再描画回数。高いほうがちらつきを低減します。60Hzで良
        く、 VESA 標準の 72Hz の方がより良いでしょう。計算はこのようにし
        ます。

                  RR = DCF / (HFL * VFL)

     [訳注 : 対訳風終り。]

     分母にある積はモニタに表示される解像度ではなく、幾らか大きいことに
     注意してください。これについては以降で詳細に説明します。

     インタレースモードの周波数は実際は半分のフレームの周波数で、普通
     87Hz interlaced のように指定します。:典型的なディスプレイの画面の全
     体ではフリッカが出るような周波数ですが、すべての単一の線が半分の周
     期で再描画されます。計算の意図はインタレース表示の周波数を全画面フ
     レームの再描画速度例えば 43.5Hz から計算することです。インタレース
     モードは全フレームの周波数で表示したインタレースでないモードより表
     示品質は優れています。しかし、確実に良くないことはインタレースでな
     い周波数が半分のフレームの周波数に一致した時です。

  5.1.  帯域幅について :

  モニタ製造会社は帯域幅が画面の迫力と色変化のシャープさを制約するので高
  帯域幅であることを宣伝します。帯域幅が大きいほど、より細かい画像を表示
  することができます。

  モニタは電気信号を用いて画像を表示します。信号は一旦デジタルからアナロ
  グへと変換されると、つねにアナログ波形として取り扱われます。それは多く
  の、固定した周波数の単純な波形の組合せであると考えられ、それらの多くは
  MHz の範囲で例えば 20MHz、40MHz、さらに 70MHz だったりします。モニタの
  ビデオ信号帯域幅は事実上歪みが無く扱える高周波のアナログ信号です。

  私達の目的のためには、帯域幅は主に使用可能なドットクロックのおおよその
  上限として重要です。

  5.2.  同期周波数と再描画速度 :

  画面上の水平走査線はフレーム長走査の中で実際に表示される部分です。それ
  ぞれの瞬間には本当はたった一つの点が画面に輝いているのですが、再描画速
  度が十分速いので目には絶え間無く全ての画像が"見える"という訳です。

  ここでいくつかの絵で解説します :

  ______________________________________________________________________
       _______________________
      |                       |     水平フレーム長は秒当たり
      |->->->->->->->->->->-> |     電子ビームががこのような
      |                      )|     パターンを秒当り表示
      |<-----<-----<-----<--- |     する回数です。
      |                       |
      |                       |
      |                       |
      |                       |
      |_______________________|
       _______________________
      |        ^              |     垂直フレーム長は
      |       ^ |             |     電子ビームがこのような
      |       | v             |     パターンを秒当り表示
      |       ^ |             |     する回数です。
      |       | |             |
      |       ^ |             |
      |       | v             |
      |       ^ |             |
      |_______|_v_____________|
  ______________________________________________________________________

  実際のラスター走査はとても細かいジグザグ型のパターンをしていて、左右に
  電子ビームが動いて同時に上下にも動いています。

  さて、ドットクロックとフレームの大きさは再描画速度に関係があるというこ
  とが分かります。定義上、 1 ヘルツ (hz) は 1 秒に 1 周期です。それか
  ら、水平フレーム長を HFL とし垂直フレーム長を VFL とした場合に全ての画
  面を覆うには (HFL * VFL) 回ドットクロックが必要です。カードは定義から
  毎秒 DCF 回信号を出していますので、明らかにモニタの電子銃は左から右、
  戻って、下から上へ、戻ってを毎秒 DCF / (HFL * VFL) 回、画面上を動き回
  れる訳です。これは毎秒何回画面を描き直しているかを表わしているので、画
  面の再描画速度なのです。

  解像度とちらつきの関係がトレードオフの関係にあるので、自分の要求に応じ
  て設定を行なうためにこの概念を理解する必要があります。

  テキストよりは視覚に訴えた方が分かるので次に関係図を描きます。:

  ______________________________________________________________________
          RR                                      VB
           |   min HSF                     max HSF |
           |    |             R1        R2  |      |
  max VSF -+----|------------/----------/---|------+----- max VSF
           |    |:::::::::::/::::::::::/:::::\     |
           |    \::::::::::/::::::::::/:::::::\    |
           |     |::::::::/::::::::::/:::::::::|   |
           |     |:::::::/::::::::::/::::::::::\   |
           |     \::::::/::::::::::/::::::::::::\  |
           |      \::::/::::::::::/::::::::::::::| |
           |       |::/::::::::::/:::::::::::::::| |
           |        \/::::::::::/:::::::::::::::::\|
           |        /\:::::::::/:::::::::::::::::::|
           |       /  \:::::::/::::::::::::::::::::|\
           |      /    |:::::/:::::::::::::::::::::| |
           |     /     \::::/::::::::::::::::::::::| \
  min VSF -+----/-------\--/-----------------------|--\--- min VSF
           |   /         \/                        |   \
           +--/----------/\------------------------+----\- DCF
             R1        R2  \                       |     \
                            min HSF                |    max HSF
                                                   VB
  ______________________________________________________________________

  これは一般的なモニタのモードダイアグラムです。ダイアグラムの x 軸はク
  ロック周波数 (DCF)、 y 軸は再描画速度 (RR) を意味しています。ダイアグ
  ラムで塗り潰してある領域はモニタのビデオに表示できる領域です。この領域
  のどの点をとっても表示可能です。

  `R1' と `R2' のラベルをつけた線は (640x480 のような) 固定解像度を意味
  しており、一つの解像度を複数の異なるドットクロックと再描画速度の組み合
  わせでどうやって実現しているかを図解したことを意味しています。R2 の線
  は R1 の解像度より高い事を表しています。

  許された領域の上と下の境界線は単に水平線が垂直同期周波数の限界値を表し
  ています。ビデオ信号帯域幅はクロック周波数の上限値で、故に領域の右の垂
  直線の境界に当たります。

  ``モニタ性能をプロットする'' でこのようなダイアグラムをプロットして独
  特のモニタの問題解決の助けにします(X graphics ではかなり役に立つでしょ
  う) その節ではまた興味深い水平同期周波数の限界から派生する領域の境界の
  について論じます。

  6.  システムの構成におけるトレードオフ

  前に示した公式は、このように変形できます。

               DCF = RR * HFL * VFL

  つまり、ドットクロックが一定だとすると、一秒間にこれだけのドット数を再
  描画速度、水平解像度または垂直解像度に振り分けることができるということ
  です。これらの数字の一つを増やすと他の数字を減らさなければなりません。

  しかし、再描画速度はモニタの最大垂直同期周波数を超えることは出来ません
  ので、注意してください。従って与えられたドットクロックで与えられたモニ
  タでは、自分で強制出来ないフレーム長の積の最小以下になります。
  自分の設定を選ぶ時に、RR が低すぎる場合、画面のちらつきで顔をしかめる
  ことを覚えてください

  多分、再描画速度を 60Hz 以下に下げたくは無いでしょう。蛍光燈のちらつく
  速さですので、ちらつきに敏感な場合は VESA 人間工学標準の 72MHz に保つ
  必要があります。

  ちらつきは大変目に辛いものですが、しかし人間の目は適応し人々のちらつき
  に対する耐性はかなり広範囲です。画面の 90% が見える角度でモニタに向き
  合っている場合に、暗い背景と良いコントラストの色を前景に使い、輝度を低
  から中に調整するならば、たぶん 45Hz 位に小さくても快適でしょう。

  厳密なテストのやり方は次の通りです : xterm -bg white -fg black で真っ
  白な背景に黒の前景の xterm を開いて、表示可能な領域全てを隠すぐらいの
  大きさにして下さい。そしてモニタの明かるさを最大の設定値の 3/4 に設定
  して、モニタから顔をそむけて、モニタを横目で覗いてみて下さい (これは、
  より敏感な視野周辺部の細胞を働かせるためです) 。なんにもちらつきを感じ
  ない場合若しくは許せる範囲ならば、あなたにとってその再描画速度は丁度良
  いのです。もしそうでなかったら、一見大丈夫なように見えても、明らかには
  判からないようなちらつきによってひどく目が疲労し頭痛を起こしますので、
  普通に見える様になる迄、より高い再描画速度に調整して下さい。

  インタレースモードでは、ちらつきの量は現在の仮想解像度と実際の画面の中
  身に依存します。したがって実験が必要になります。半フレームの周波数を
  85Hz 程度よりは低くしたくないでしょう。

  このようにして最小の許容できる再描画速度を選ぶことができます。HFL と
  VFL を選択するためには、多少の作戦の余地があるでしょう。

  7.  要求メモリ量

  自分が実現しようとしているカラーやグレースケールディスプレイの解像度は
  使用可能なフレームバッファメモリの量で制限されます。2 色 (白黒) でグレ
  ースケールでない物の場合は、制限を受けることは多分ありません。

  256 色のディスプレイの場合は、ビデオメモリのバイト数は表示されるドット
  の数だけ必要です。このバイト数は赤緑青から成る集合の点を 1 点とした数
  です。必要なメモリ量を得るには、線 1 本当たりに表示される点の数に表示
  される線の数を掛けて下さい。800x600 の解像度を持つディスプレイの場合
  は、ディスプレイに表示する点の数は 800 x 600 = 480,000 になります。ま
  た、 1 ドットが 1 バイトに成るので、アダプタカードに同じバイト数のビデ
  オメモリが必要です。

  従って、メモリ量は、一般に (HR * VR)/1024 をキロバイト単位に切り上げた
  物が必要です。例を挙げれば、 (936 * 702)/1024 = 642K バイトとなりま
  す。従って 1M バイトのメモリがあれば、余りを仮想スクリーンに割り当てて
  スクロール出来ます。

  ところが、ボードに 512K しか無い場合はこの解像度は使えません。良いモニ
  タを持っていたとしても、十分なビデオメモリが無しにはモニタの性能を活か
  すことは出来ません。また一方で、SVGA カードが 1M バイトのメモリを持っ
  ていたとしても、モニタが最高で 800x600 しか表示できないならば、これ以
  上の高解像度はどうやっても無理というものです。

  要求量より多いメモリを持っていても心配しないで下さい。XFree86 は余った
  メモリで表示領域をスクロールできるようにします (仮想スクリーンの大きさ
  のパラメータについての Xconfig ファイルの文書を参照して下さい) 。ま
  た、512K バイトのメモリを搭載したカードは 512,000 バイトではなく、本当
  は 512 x 1024 = 524,288 バイトのメモリが搭載されていることを覚えていて
  下さい。

  S3 カードで SGCS X が動作していて、かつ 16 色 ( 1 ピクセル当たり 4
  ビット) の場合、Xconfig ファイルで 深度 4 と設定すれば、カードは倍の解
  像度を使えます。例えば、S3 カードは通常 1024x768x256  (1024x768 の解像
  度で 256 色) ですが、深度 4 にすれば 1280x1024x16  (1280x1024 の解像度
  で 16 色) が使えるようになります。
  [訳注 : 深度とは色数やグレースケールを表現するビット数です。]

  8.  フレームサイズの計算

  警告 : この方法はマルチシンクモニタのために開発しました。多分、この方
  法は固定周波数モニタでうまく行くかも知れませんが、保証できません。

  最初に最大の使用可能な HSF で DCF を割って、水平走査可能回数を計算して
  下さい。

  例えば、 65MHz のドットクロックの Sigma Legend SVGA カードと、55KHz の
  水平走査周波数のモニタを使っていると仮定します。DCF / HSF を計算すると
  1181 という量が得られます。

  さあ、最初の黒魔術の技の片鱗を使いましょう。この式の答えをもっとも近い
  8 の倍数に丸めて下さい。これは 8 ビットレジスタを持ち、左に 3 ビットず
  らして 11 ビットの値を得るような SVGA と S3 の VGA 制御装置において有
  効です。 ATI 8514/A のような他のカードではこのような要求はないかも知れ
  ませんが、我々は正確な知識を持ち合わせてはいませんし、丸めによって不都
  合なことが生じることはありません。従って水平走査可能回数を 1176 に丸め
  ます。

  この数字 (DCF / HSF を 8 の倍数に丸めたもの) は最小の HFL として用いる
  ことが出来ます。より低い HSF で同期信号を設定すれば、もっと長い HFL
  (つまり、多分より多くの画面の水平方向のドット数) が得られます。しか
  し、遅くてより多く見えるちらつきの速度に復讐されるでしょう。

  経験的な法則では、水平フレーム長の 80% が水平解像度として使用可能で、
  水平走査線の表示される部分 (これは大体、境界と電子ビームが画面の右端か
  ら次の走査線の左端へ戻ってくる時間を差し引いたもの) です。この例で
  は、944 になります。

  さて、通常の画面のアスペクト比 (横縦比) 4:3 を得るため、今計算した水平
  解像度の 3/4 になるように垂直解像度を設定しましょう。この例では、708
  になります。実際の VFL を得るには、1.05 を掛けて 743 になります。

  この 4:3 について --- 表示上の幅と高さが 4:3 の比率は大体黄金分割比の
  値、 (1 + sqrt(5))/2 に近い値です。人間はこの種の矩形を見て好ましいと
  思うようにできているようです。そのためブラウン管や 800x600, 640x480 そ
  して 1024x768 という標準的な解像度はみなこの黄金分割比の近似値になって
  います。しかしこれは心理学的な要求であって、技術的な要求ではありませ
  ん。もしその方が画面の大きさを有効に活用できるのであれば、非黄金分割比
  を使うことをためらう理由は何もありません。

  結局、HFL=1176 と VFL=743 としました。65MHz をこの 2 つの数字の積で割
  ると、十分に高くて健康に良い 74.4Hz の再描画速度が得られます。素晴らし
  い！ VESA 標準より立派でしょう！ おまけに、おそらく予想していた
  800x600 よりも高い 944x708 という解像度が得られたのです。本当に素晴ら
  しい！

  さらに (大体 76 Hz 迄) 再描画速度を改良することも可能です。これには、
  定格よりも 2 KHz くらい高い水平同期周波数でも動くモニタが多いという事
  実と、 VFL を幾らか下げる (つまり、上の例で言うと 944 の 75% よりも小
  さくする) ことを利用します。しかしこの "オーバードライブ" 作戦を試して
  みる前に、あなたのモニタの電子銃が垂直同期を 76 Hz 以上でできることを
  確認してください。 (例えば、人気のある NEC 4D ではこれは出来ません。こ
  れは 75 Hz 迄の VSF のみが利用できます。)

  以上が、ラスタ表示についての単純な計算と基本的な事柄のほとんどです。ほ
  とんど黒魔術でも何でも無いですね。

  9.  黒魔術と同期信号

  さあ、自分で選んだドットクロック対応に計算した HFL/VFL の数字があり、
  無難な再描画速度が見つかり、十分な VRAM  (ビデオメモリ) があることを確
  認しました。これからが本当の黒魔術です -- いつどこで同期信号を出すかを
  知る必要があります。

  同期信号が実際にモニタの水平及び垂直の走査周波数を制御しています。仕様
  表から引っぱり出してきた HSF と VSF は定格上の最大同期周波数の推定値で
  す。アダプタカードからの信号の中の同期信号はモニタにどれくらい速く実際
  に動作するか伝えます。

  上記の 2 つの絵を思い出して下さい。目に見える画像 (あなたの選んだ解像
  度) を表示するために使われるのは、フレームをラスタ走査するために必要な
  時間の一部だけです。

  9.1.  水平同期 :

  前の定義によれば、 1 本の水平走査線をたどるのには HFL 分の時間掛かりま
  す。表示される部分のクロック回数 (水平スクリーン解像度) を HR と呼びま
  しょう。その時は明らかに、定義から HR < HFL となります。具体的に両方が
  同時に開始したと仮定して次に示します :

  ______________________________________________________________________
    |___ __ __ __ __ __ __ __ __ __ __ __ __
    |_ _ _ _ _ _ _ _ _ _ _ _                |
    |_______________________|_______________|_____
    0                       ^               ^     単位: 水平クロック
                            |   ^       ^   |
                            HR  |       |  HFL
                            |   |<----->|   |
                            |<->|  HSP  |<->|
                            HGT1         HGT2
  ______________________________________________________________________

  ここで、上にあるように表示データのクロック終了とフレーム全体のクロック
  終了の間に HSP の同期信号長を配置します。何故そうするのか？ それはこう
  すると、画面表示が左右に移動しなくなるからです。表示をスクリーン上で表
  示されるべき場所、つまりモニタの表示可能領域内にきっちりとおさめるため
  です。

  その上、同期信号の両側に "保護時間" として約 30 クロック必要です。HGT1
  と HGT2 で表わしています。一般的には HGT1 は HGT2 と等しくありません
  が、しかし真っさらの状態から設定を行うならば、2 つを等しくして実験を始
  めたら良いでしょう (それは同期信号を中央に置くことになります) 。

  同期信号の置き違えの症状は、1 つの境界が極端に広くなって画像の他の側が
  画面の端から回り込んだり、白い端の線と"お化け画像"の帯になったり、画面
  の画像表示のずれとして現われます。垂直同期信号抜けは垂直保持が調節不備
  になっている TV の様に実際に縦スクロールします (事実、同じ現象が起こり
  ます) 。

  幸運ならば、モニタの同期信号の幅がその仕様書に記載されているでしょう。
  記載がない場合には、ここからが本当の黒魔術の始まり、、、

  ここでは少し試行錯誤を行う必要があるでしょう。しかしほとんどの場合に
  は、同期信号を約 3.5 から 4.0 マイクロ秒と仮定すれば安全です。

  具体的には、HSP を 3.8 マイクロ秒にしましょう (この値は実験を始めるに
  当たっては悪い値ではありません) 。

  さて、先ほど 65Mhz をクロックに使いましたから、HSP を 247 クロック分と
  等しくすればよいことがわかります。( 247 = 65 * 10**6 * 3.8 * 10^-6)
  [メガ=10^6, マイクロ=10^-6 である事を思い出して下さい]

  幾つかの製造会社はドット幅より水平方向のフレームパラメタで見積もってい
  ます。次の用語を御覧下さい。:

     active time (HAT)
        稼働時間 (HAT) ミリ秒に換算した HR に相当.  HAT * DCF = HR.

     blanking time (HBT)
        空白時間 (HBT) ミリ秒に換算した (HFL - HR) に相当.  HBT * DCF =
        (HFL - HR).

     front porch (HFP)
        フロントポーチ (HFP) まさしく HGT1 です.

     sync time
        同期時間まさしく HSP です.

     back porch (HBP)
        バックポーチ (HBP) まさしく HGT2 です.

  9.2.  垂直同期 :

  前の絵に戻って、247 クロック分を絵の中でどのように置いたらいいでしょ
  う？

  この例では、HR は 944 で HFL は 1176 です。この 2 つの例の差は
  1176-944=232 < 247です! 明らかにこの違いを調整しなければいけません。何
  ができるでしょうか？

  最初に 1176 は 1184 へ上げて、 944 は 936 へ下げてください。さて、違い
  は 1184-936= 248 になりました。う〜ん、近づきましたね。

  次は HSP を計算するのに 3.8 の代わりに、3.5 を使うようにすると、
  65*3.5=227 となります。かなり良くなりました。しかし 248 は 227 よりそ
  れほど大きくありません。HR と SP の開始点の間と SP の終了点と HFL の間
  に 30 かそれぐらいあける必要があります。そして、それらは 8 の倍数にし
  なければなりません ! 我々はここで行き詰まってしまったのでしょうか ?

  いいえ！ こうしてみましょう、936% 8==0 です、また (936+32)% 8==0 で
  す。しかし、936+32=968、968+227=1195、1195+32=1227 となります。ふむふ
  む、そんなに悪くはありません。しかし、8 の倍数にはなっていませんの
  で、1232 に丸めて下さい。

  しかし、同期信号を HR と HFL のちょうど真ん中に置くことが出来ないとい
  う潜在的な困難があります。幸いにも、1232-32=1200 も 8 の倍数である事
  と、 (1232-32)-968=232 は 3.57 マイクロ秒 (232/65) という妥当な長さの
  同期信号に対応することが計算でわかります。

  さらに、 936/1232 は大体 0.76 つまり 76%, ですが、80% からそう遠くない
  のでまあ大丈夫でしょう。

  その上、現在の水平フレーム長を使うなら、基本的にはモニタがその能力内で
  52.7KHz(=65MHz/1232) において同期が取れるかどうか調べましょう。問題は
  無いでしょう。

  経験則から、上記の 936*75%=702 を新しい垂直解像度にしましょう。
  702*1.05=737 が新しい垂直フレーム長になります。

  画面再描画速度は 65Mhz/(737*1232)=71.6 Hz になります。それでも素晴らし
  いですね。
  同様に垂直同期信号の配置を図解します :

  ______________________________________________________________________
     |___ __ __ __ __ __ __ __ __ __ __ __ __
     |_ _ _ _ _ _ _ _ _ _ _ _                |
     |_______________________|_______________|_____
     0                      VR              VFL     単位: 垂直クロック
                             ^   ^       ^
                             |   |       |
                             |<->|<----->|
                              VGT    VSP
  ______________________________________________________________________

  垂直表示データの終了時きっかりに同期信号を発信します。VGT は同期信号の
  垂直保護時間です。ほとんどのモニタは VGT 無し (保護時間無し) で快適に
  動作し、例題でも保護時間無しです。2,3 クロックの保護時間が必要なものも
  ありますが、保護時間を入れて不都合が生じることは普通ありません。

  例題に戻りましょう : フレーム長の定義から、垂直クロックは全水平フレー
  ムを辿る時間ですので、例題では 1232/65Mhz=18.95 マイクロ秒になります。

  実験によれば垂直同期のパルス幅は 50 マイクロ秒から 300 マイクロ秒の範
  囲に設定すべきです。例題では 8 垂直クロック分、150 マイクロ秒を使用し
  ます (150 マイクロ秒 / 18.95 マイクロ秒   8)。

  幾つかの製造会社はドット幅より垂直方向のフレームパラメタで見積もってい
  ます。次の用語を御覧下さい。:

     active time (VAT)
        稼働時間 (VAT) ミリ秒に換算した VR に相当.  VAT * VSF = VR.

     blanking time (VBT)
        空白時間ミリ秒に換算した (VFL - VR) に相当.  VBT * VSF = (VFL -
        VR).

     front porch (VFP)
        フロントポーチ (VFP) まさしく VGT です.

     sync time
        同期時間まさしく VSP です.

     back porch (VBP)
        バックポーチ (VBP) 垂直同期信号の後の第 2 保護時間に似ています。
        しばしばゼロです。

  10.  全体のまとめ

  Xconfig ファイルのビデオモード ( Video Modes ) 表は数行の数列で出来て
  いて、それぞれの行は X サーバが使用する 1 つのモードの完全な仕様を表わ
  しています。その項目は名称節、ドットクロック節、水平節、垂直節の 4 つ
  の節に分けられます。

  名称節は 1 項目で、行の残りで指定しているビデオモードの名称です。この
  名称は、 Xconfig ファイルのグラフィックドライバ設定節の "Modes" 行で参
  照されます。現在の行が前の行と同じ名称ならば名称は省略出来ます。

  ドットクロック節はビデオモード行の項目に DCF と呼んでいたドットクロッ
  クのみを書きます。次の節で作成する数字をドットクロックとしてこの項目に
  書きます。

  水平節はそれぞれの水平線を画面の上でどのように作成するかを 4 項目で書
  きます。最初の項目は HR と呼んでいた映像を構成する輝く 1 本が何ドット
  であるかを書きます。 2 番目の項目はどのドットから水平同期信号が始まる
  かを示します。 3 番目の項目はどのドットで水平同期信号が終わるかを示し
  ます。 4 番目の項目は全水平フレーム長 (HFL) を指定します。

  垂直節も 4 項目で書きます。最初の項目は画面上に表示される走査線の数を
  書きます (VR)。 2 番目の項目は垂直同期信号が何番目の線から始まるかを書
  きます。 3 番目の項目は垂直同期信号が何番目の線で終わるかを書きます。4
  番目の項目は全垂直フレーム長を書きます。

  例 :

            #名称節 モードクロック節 水平節(1から4) 垂直節(1から4)
            #Modename    clock  horizontal timing  vertical timing

            "752x564"     40    752 784  944 1088  564 567 569 611
                          44.5  752 792  976 1240  564 567 570 600

  (注意 : 標準的な X11R5 そのままでは 小数のドットクロックは使えませ
  ん。)

  Xconfig では、線上で輝いているドットの数、輝いているドットから同期信号
  の開始点までのドット数、同期信号の持続時間分のドット数と同期信号の終了
  点から後のドット数、これらを足し合わせると 1 本当たりのドット数が計算
  できます。水平方向のドット数は一律に 8 で割り切れる数値でなければいけ
  ません。

  例 :

  水平方向の数値 : 800 864 1024 1088

  この例は輝いているドット数 (800)、続いて同期開始点のドット (864)、その
  次が同期終了点のドット (1024)、次は水平線の最後のドット (1088) となり
  ます。

  全ての水平方向の数字 (800、864、1024 と 1088) は 8 で割り切れる事にも
  う一度注意をして下さい。これは垂直方向の数字には当てはまりません。

  画面の上から下までの線の数がフレームを構成します。フレームの基本的な時
  間調整は線で行ないます。線の多くは画像を表示するために使われます。最後
  の発光する線を表示した後で、数本分遅延が挿入され、その後垂直同期信号が
  生成されます。そして同期信号は数本分だけ持続し、フレームの最後に同期信
  号の後で必要な遅延が生成されます。この動作モードを規定する数値は、次の
  例のように入力します。

  例 :

  垂直方向の数値 : 600 603 609 630

  この例はディスプレイに 600 本の線が表示され、603 番目の線から垂直同期
  が始まり 609 番目で終わる事、そして全部で 630 本の線を使用することを表
  わしています。

  垂直方向の数値は 8 で割り切れる値でなくても構いません。

  例題に戻りましょう。上記によって、Xconfig へ書き込む必要な全ての値は次
  の様です:

  < name >   DCF     HR  SH1 SH2   HFL   VR  SV1 SV2 VFL

  ここで SH1 は水平同期信号の開始クロックで、SH2 はその終了クロックにな
  り、同様に SV1 は垂直同期信号の開始クロックで、SV2 はその終了クロック
  です。

       #名称節 モードクロック節 水平節(1から4) 垂直節(1から4) オプション
       #name    clock   horizontal timing   vertical timing    flag
       936x702  65      936 968 1200 1232   702 702 710 737

  特別なオプションは必要無く、これはノンインタレースモードで動作します。
  これで完了しました。

  11.  モニタの仕様外使用

  固定周波数型のモニタの場合、モニタの規定走査周波数を超えては絶対になり
  ません。これをやってしまうと機器から煙を出してしまうかも知れません!
  マルチシンクモニタでも、周波数を上げるとこれよりは些細ながらいろいろな
  問題が出る可能性がありますので、心に止めておかなければなりません。

  モニタの最高周波数帯域より高いピクセルクロックを使っても、比較的無害で
  す。 (注意: ピクセルクロックがモニタの帯域幅の倍になると、認識可能機能
  の理論的な限界に達してしまいます。これは 空間軸上に離散した駆動信号の
  標本系列に関する Nyquist の理論の単純な応用で、どうしてだかはおわかり
  ですね。)

  過度に最大とみなしている同期周波数は疑わしいです。最近のモニタの中に
  は、危険な走査周波数に対してモニタを消すような保護回路を装備しているも
  のもありますが、これを過信してはなりません。特に、水平同期用のトランス
  を一つしか持っていない(Multisync II のような)古いマルチシンクモニタも
  あります。これらのモニタを過負荷から保護する事はできません。高電圧安定
  回路は確実に備わっていますが(固定周波数型のモニタには無い可能性があり
  ます)、特に安いモニタでは、かならずしも考えられるすべての周波数帯域を
  カバーしているとは限りません。このため、電子回路が傷むのが速いだけでな
  く、画面の発光体も速く傷み、規定以上の(X 線を含む) 放射線がモニタから
  放出されることになります。

  帯域についてもうひとつ大切なことは、モニタの入力インピーダンスはモニタ
  の帯域内だけで規定されているので、高い周波数を使うと反射が起こり、軽い
  画面上の干渉と電波障害が起こる可能性があります。

  しかしながら、ここで問題となっている本質的な問題部分は、ビデオ出力ドラ
  イバ回路のスルーレート (ビデオ信号の立ち上がりの傾斜) で、これは通常実
  際のピクセル周波数とは無関係ですが、(ボードの製造者がこのような問題に
  注意を払っていれば) ボードの最大ピクセル周波数と関連があります。

  これらに注意しつつ作業をしましょう、、、

  12.  インタレースモードを使用する

  (この節は殆んど David Kastrup <dak@pool.informatik.rwth-aachen.de> に
  よります)

  固定のドットクロックでは、モニタの垂直同期回路が安定してサポートできる
  なら、ノンインタレース画面よりもインタレース画面の方が目につくちらつき
  がかなり少なくなります。インタレースモードが最初に開発されたのは、この
  ためです。

  インタレースモードは、同じ垂直走査周波数 すなわちVSF(通常広告に良く使
  われています) のノンインタレースモードの同等品より劣るという悪評をかっ
  ていました。しかし、インタレースモードは同じ水平走査周波数では確実に優
  れていて、普通はそこでモニタやグラフィックボードの明白な限界が見えてく
  るものです。

  固定の再描画速度 (すなわちフレーム周波数の半分、つまり VSF) では、イン
  タレースのディスプレイはちらつきがより多く見えます。たとえば、 90Hz の
  インタレースディスプレイは 90Hz のノンインタレースディスプレイより劣り
  ます。けれども、半分のビデオ信号帯域幅と半分の水平走査速度ですみます。
  同じドットクロックと同じ走査速度でノンインタレースディスプレイと比べた
  ら、インタレースディスプレイのほうがずっとよく見えるでしょう。 45Hz の
  ノンインタレースディスプレイなどは、お話になりません。私は、90Hz のイ
  ンタレースで (1024x768)  Multisync 3D は何年も使っていて、たいへん満足
  しています。同様な快適さを得るためには、最低 70Hz のノンインタレース
  ディスプレイが必要だと思います。

  注意が必要なこともいくつかあります。インタレースモードは高解像度でだけ
  使って、一本おきの輝線がお互いに近くなるようにします。最も安定した線の
  位置を得るために、同期信号の幅と位置をいじる必要があるかもしれません。
  一本おきに線が明暗すると、インタレースは ぎらぎらして見えます。私は、
  メニューの背景にそのようなドットパターンを選んだアプリケーションを一つ
  持っています(XCept、幸いなことに他の私の知っているアプリケーションでは
  このようなことをするものはありません)。私は、XCept を使うときには
  800x600 に切り替えます。というのはさもなければ目を痛めてしまうからで
  す。

  同じ理由で、最低 100dpi フォントを使うこと、またはほかのフォントでも水
  平ビームが最低 2 本分の厚みがあるフォントを使いましょう(高解像度には、
  他のどんな方法でもだめでしょう)。

  そして勿論、同様な再描画速度でノンインタレースモードをサポートしている
  機器の時はインタレースモードを使うことはできません。

  しかしながら、もしある解像度でモニタかグラフィックカードのどちらかの上
  限に達してしまって不快なちらつきや色落ち (帯域幅を超えた時) 表示が起
  こったと思ったら、同じ解像度でインタレースモードを試してみるといいかも
  しれません。勿論、これはモニタの VSF がすでに上限に近い場合は使えませ
  ん。

  インタレースモデルの設計は簡単です。ノンインタレースモードと同じように
  考えましょう。2 つの検討が必要です。"interlace" オプションを指定した
  時、垂直線の総数が奇数 (モード行の最後の数値) が必要な場合、モニタ対応
  の実際の垂直フレーム周波数が倍になること。45Hz のモードを "Interlace"
  オプションをつけて指定した場合、モニタが 90Hz のフレーム周波数のサポー
  トする必要があります。

  例えば、1024x768 のインタレースモードのモード行があった場合、Multisync
  3D は 90Hz の垂直フレーム周波数と 38kHz の 水平フレーム周波数になりま
  す。

       ModeLine "1024x768" 45 1024 1048 1208 1248 768 768 776 807 Interlace

  両方の上限はかなりこのモードでは使い尽くされたものです。同じモードを指
  定するのに "Interlace" オプションをつけない場合は既にモニタの水平方向
  の容量のほとんど上限です(厳密に言えば、垂直走査周波数の下限より少し下
  回ります)。しかし、耐えられないほどのちらつきを生じます。

  基本的な設計ルールは、モニタの垂直容量の半分以下にモードを設計する場合
  は垂直方向の線の合計を奇数にして "Interlace" オプションを追加しましょ
  う。ほとんどの場合、表示の品質は非常に向上するでしょう。

  モニタの 30% から最大以下の垂直走査周波数のモニタの仕様が疲れるものと
  異なるノンインタレースモードを使う場合は、インタレースモードを手作りで
  作る(多分、多少高い解像度になるでしょう)とすばらしい結果を得ることがで
  きます。しかし約束はできませんけど。

  13.  質疑応答

  Q. ここにある例題は標準的な画面サイズではありませんが、使ってもよいで
  すか？

  A. 勿論です。なにがなんでも 640x480, 800x600 とか 1024x768 を使わなけ
  ればならない理由はありません。XFree86 ドライバはハードウェアを自由に設
  定できるようになっています。一般に正しい設定は 2 、3 分でできるように
  なります。正しい設定を当てるのに重要な物は高い再描画速度と妥当な表示領
  域です。高解像度だけを追求して涙目を誘うちらつきに代償を払うことのない
  ようにしてください。

  Q. 65Mhz のドットクロックと 55Khz の HSF で得られる解像度はこれだけで
  すか？

  A. 絶対そんなことはありません！ 一般的な手順に従って作業を行い、本当に
  好みの設定にたどり着くため、少しの試行の繰り返しをお勧めします。 実験
  はとっても楽しいものです。 ほとんどの設定はビデオ表示が乱れてちゃんと
  設定できないかもしれませんが、マルチシンクモニタを (帯域幅よりもはるか
  に高い周波数のクロックを出力させようとしない限りは --- モニタの説明書
  に書かれている最大解像度に近い値を守っている場合は) 痛めることはありま
  せん。固定周波数のモニタには注意してください。周波数調整は固定周波数の
  モニタを痛めるかもしれません。

  Q. 二つの標準的な解像度を記載してますね。 Xconfig の中では色々標準的な
  解像度がありますが、時間調節の数値を調整する場合のポイントを教えてくだ
  さい。

  A. 勿論教えましょう！ 現在の Xconfig にある "標準的な" 640x480 を例題
  に取り上げます。この場合、動作周波数が 25MHz 、フレーム長が 800 と 525
  の時に約 59.5Hz の画面再描画速度が使えます。 悪く無いでしょ？ しかし一
  般的に多くの SVGA ボードの動作周波数は 28MHz を使えます。28MHz で
  640x480 を使う場合、以前に説明した手順に従えば、フレーム長は 812 と
  505 に設定できます。ここで再描画速度は 68MHz まで引き上げられ、標準値
  よりかなり向上しました。

  Q. 今までの議論をまとめてもらえますか？

  A. 要約して言えば :

  1. 任意の固定の動作周波数では、最高の解像度に高めれば再描画速度を下げ
     なければならず、したがってちらつきが増えるでしょう。

  2. 高解像度を希望しモニタがそれをサポートするときは、それに合うドット
     クロック、つまり DCF を供給する SVGA カードを手に入れて下さい。ドッ
     トクロックは高いに越したことはありません。

  14.  画像表示の問題修正

  さあ、 X の構成定義の数値を手に入れました。Xconfig に その数値をテスト
  中のコメントをつけて書きました。X を立ちあげ、ホットキーで新しいモード
  に切り替えてみました ... しかし画像が変です。こういう場合、どうすれば
  いいのでしょう？一般的な問題と解決策をここに挙げます。

  (小さな歪みの修正において xvidtune(1) が秀でています。)

  同期信号の調整を変えて画像を 移動 してみてください。フレーム長を変えて
  画像を 拡大縮小 して下さい (相対的な位置をそのままに同期信号を移動する
  必要があります。そうしないと拡大縮小と同時に画像の移動も起こってしまい
  ます) 。もう少し個別の対処方法を次に示します。:

  水平と垂直の表示位置は独立しています。これは画像を水平に移動させても垂
  直位置には影響がなく、また逆も同じということです。ところが拡大縮小では
  必ずしもそうではありません。水平方向の大きさを変えても垂直方向の大きさ
  には何も影響を与えず、逆も同じですが、縦横両方の変更量の合計は限定され
  ています。特に、縦横に大き過ぎた場合はより高いドットクロックに変更して
  修正する必要があるでしょう。使用可能な解像度を引き上げることになるた
  め、これはめったに問題とはなりません。

  14.1.  画像が左か右にずれている場合

  これを修正するために水平同期信号を移動しましょう。それは水平同期信号の
  開始端と終了端を定義している水平調整部分の真ん中の 2 つの数値を ( 8 の
  倍数ずつ) 増減させて行いましょう。

  画像が左にずれている (右の縁の部分が大きすぎて、右へ画像を移動したい)
  時は、数値を増やしてください。画像が右にずれている (左の縁の部分が大き
  すぎて、左へ画像を移動したい) 時は、同期信号を減らしてください。

  14.2.  画像が上下に動いている場合

  これを修正するために垂直同期信号を移動してください。それは垂直同期信号
  の開始端と終了端を定義している垂直調整部分の真ん中の 2 つの数値を増減
  させて行いましょう。

  画像が上にずれている (下の縁の部分が大きすぎて、下に画像を移動したい)
  時は、数値を減らしてください。画像が下にずれている (上の縁の部分が大き
  すぎて、上へ画像を移動したい) 時は、数値を増やしてください。

  14.3.  画像が垂直と水平の両方に膨らんでいる場合

  より高いカードクロックに切り替えましょう。クロックファイルに複数のモー
  ドがある場合、あるいは低い方の速度のモードに間違って作動させているかも
  しれません。

  14.4.  画像が水平方向に広すぎる (狭すぎる) 場合

  これを修正するためには水平フレーム長を増やし (減らし) てください。それ
  は最初の調整部分の 4 番目の数値を変えて行います。画像が移動するのを回
  避するため、同期信号 ( 2 番目と 3 番目の数値) もその半分だけ移動し、同
  じ相対位置を保存しておいてください。

  14.5.  画像が垂直方向に膨らんでいる (痩せている) 場合

  これを修正するためには垂直フレーム長を減らし (増やし) てください。それ
  は 2 番目の調整部分の 4 番目の数値を変えて行います。画像が移動するのを
  回避するため、同期信号 ( 2 番目と 3 番目の数値で) もその半分だけ移動
  し、同じ相対位置を保存しておいてください。

  これらの技術の組合せでも取れない他の歪みは多分もっと基本的な部分が違っ
  ている、例えば計算違いとかモニタで使えない高いドットクロックを使ってい
  るような場合があります。

  最後に、フレーム長のどちらかの数値を増やせば再描画速度が低下してしまう
  こと、またその逆も言えることを覚えておいて下さい。

  15.  モニタの特性をプロットする。

  モニタモードダイアグラムをプロットするには、gnuplot パッケージ (UNIX
  のようなオペレーティングシステム用のフリーウェアのプロット言語) とコマ
  ンドラインから入力したモニタの特性から gnuplot で ダイアグラムをプロッ
  トする shell スクリプトである modeplot ツールが必要です。

  ここからは modeplot のリストです。:

  ______________________________________________________________________
  #!/bin/sh
  #
  # modeplot -- generate X mode plot of available monitor modes
  # modeplot -- 使用可能なモニタのモードから X モードプロットを生成します。
  #
  # Do `modeplot -?' to see the control options.
  # `modeplot -?' と入力すると制御オプションを見ることができます。
  #
  # ($Id: VidModes.sgml,v 1.1 1999/08/29 15:25:21 fujiwara Exp $)

  # Monitor description. Bandwidth in MHz, horizontal frequencies in kHz
  # and vertical frequencies in Hz.
  # モニタの説明。帯域幅を MHz で、水平周波数を kHz で、それと垂直周波数を
  # Hz で指定しましょう。
  TITLE="Viewsonic 21PS"
  BANDWIDTH=185
  MINHSF=31
  MAXHSF=85
  MINVSF=50
  MAXVSF=160
  ASPECT="4/3"
  vesa=72.5       # VESA-recommended minimum refresh rate
              # VESA-推奨の最小再描画速度
  while [ "$1" != "" ]
  do
          case $1 in
          -t) TITLE="$2"; shift;;
          -b) BANDWIDTH="$2"; shift;;
          -h) MINHSF="$2" MAXHSF="$3"; shift; shift;;
          -v) MINVSF="$2" MAXVSF="$3"; shift; shift;;
          -a) ASPECT="$2"; shift;;
          -g) GNUOPTS="$2"; shift;;
          -?) cat <<EOF
  modeplot control switches:

  -t "<description>"  name of monitor            defaults to "Viewsonic 21PS"
  -b <nn>                 bandwidth in MHz           defaults to 185
  -h <min> <max>          min & max HSF (kHz)        defaults to 31 85
  -v <min> <max>          min & max VSF (Hz)         defaults to 50 160
  -a <aspect ratio>       aspect ratio               defaults to 4/3
  -g "<options>"      pass options to gnuplot
  modeplot 制御スイッチ:

  -t "<種類>"         モニタ名称              標準値は "Viewsonic 21PS"
  -b <nn>                 帯域幅を MHz で         標準値は 185
  -h <最小> <最大>        最小と最大の HSF を kHz で 標準値は 31 85
  -v <最小> <最大>        最小と最大の VSF を Hz で  標準値は 50 160
  -a <アスペクト比>       アスペクト比            標準値は 4/3
  -g "<オプション>"   gnuplot へ渡すオプション

  The -b, -h and -v options are required, -a, -t, -g optional.  You can
  use -g to pass a device type to gnuplot so that (for example) modeplot's
  output can be redirected to a printer.  See gnuplot(1) for  details.

  The modeplot tool was created by Eric S. Raymond <esr@thyrsus.com> based on
  analysis and scratch code by Martin Lottermoser <Martin.Lottermoser@mch.sni.de>

  -b, -h と -v オプションは必須で、-a, -t, -g はオプションです。
  -g でデバイスタイプを gnuplot に渡します。従って例えば modeplot の
  出力はプリンタにリダイレクトされます。詳細は  gnuplot(1) のマニュアルを
  御覧下さい。

  modeplot ツールは Eric S. Raymond <esr@thyrsus.com> が
   Martin Lottermoser <Martin.Lottermoser@mch.sni.de> による
  分析と一から書いたコードを元に作成しました。
  This is modeplot $Revision: 1.1 $
  EOF
                  exit;;
          esac
          shift
  done

  gnuplot $GNUOPTS <<EOF
  set title "$TITLE Mode Plot"

  # Magic numbers.  Unfortunately, the plot is quite sensitive to changes in
  # these, and they may fail to represent reality on some monitors.  We need
  # to fix values to get even an approximation of the mode diagram.  These come
  # from looking at lots of values in the ModeDB database.
  F1 = 1.30       # multiplier to convert horizontal resolution to frame width
  F2 = 1.05       # multiplier to convert vertical resolution to frame height
  # 魔法の数値です。残念ながら、プロットはこれらの数値を変更することに対して
  # 非常に敏感です。またこれらの数値で幾つかの代表的なモニタで実際にうまく
  # 行かない場合があります。我々はモードダイアグラムの概算をむら無く取得できる
  # 数値になるように修正していきます。これらの数値は ModeDB データベースの
  # 多量の数字から導き出しました。
  F1 = 1.30       # 水平解像度をフレーム幅に変換する乗数
  F2 = 1.05       # 垂直解像度をフレーム幅に変換する乗数

  # Function definitions (multiplication by 1.0 forces real-number arithmetic)
  # 関数定義 (1.0 を掛けると実際の数の計算となる)
  ac = (1.0*$ASPECT)*F1/F2
  refresh(hsync, dcf) = ac * (hsync**2)/(1.0*dcf)
  dotclock(hsync, rr) = ac * (hsync**2)/(1.0*rr)
  resolution(hv, dcf) = dcf * (10**6)/(hv * F1 * F2)

  # Put labels on the axes
  # 軸のラベルを定義する
  set xlabel 'DCF (MHz)'
  set ylabel 'RR (Hz)' 6  # Put it right over the Y axis
                          # Y 軸の右上におく

  # Generate diagram
  # ダイアグラムを生成する
  set grid
  set label "VB" at $BANDWIDTH+1, ($MAXVSF + $MINVSF) / 2 left
  set arrow from $BANDWIDTH, $MINVSF to $BANDWIDTH, $MAXVSF nohead
  set label "max VSF" at 1, $MAXVSF-1.5
  set arrow from 0, $MAXVSF to $BANDWIDTH, $MAXVSF nohead
  set label "min VSF" at 1, $MINVSF-1.5
  set arrow from 0, $MINVSF to $BANDWIDTH, $MINVSF nohead
  set label "min HSF" at dotclock($MINHSF, $MAXVSF+17), $MAXVSF + 17 right
  set label "max HSF" at dotclock($MAXHSF, $MAXVSF+17), $MAXVSF + 17 right
  set label "VESA $vesa" at 1, $vesa-1.5
  set arrow from 0, $vesa to $BANDWIDTH, $vesa nohead # style -1
  plot [dcf=0:1.1*$BANDWIDTH] [$MINVSF-10:$MAXVSF+20] \
    refresh($MINHSF, dcf) notitle with lines 1, \
    refresh($MAXHSF, dcf) notitle with lines 1, \
    resolution(640*480,   dcf) title "640x480  " with points 2, \
    resolution(800*600,   dcf) title "800x600  " with points 3, \
    resolution(1024*768,  dcf) title "1024x768 " with points 4, \
    resolution(1280*1024, dcf) title "1280x1024" with points 5, \
    resolution(1600*1280, dcf) title "1600x1200" with points 6

  pause 9999
  EOF
  ______________________________________________________________________

  modeplot を持っていることと gnuplot パッケージがある場所を確認したら、
  次に述べるモニタの特性値が必要です。:

  o  ビデオ帯域幅 (VB)

  o  水平同期周波数の範囲 (HSF)

  o  垂直同期周波数の範囲 (VSF)

  プロットプログラムは必ずしも正確でない幾つかの仮説を容易にします。その
  理由は得られたダイアグラムがざっくりした記述であるからです。これらの仮
  定は:

  1. すべての解答は一つの固定されたアスペクト比 AR = HR/VR を使っていま
     す。標準的な解答は have AR = 4/3 又は AR = 5/4。modeplot プログラム
     は標準で 4/3 を仮定していますが、上書き可能です。

  2. モードを考慮すると、水平と垂直のフレーム長は水平と垂直の解像度の倍
     数に調整されていますので、それぞれ次のようになります:

               HFL = F1 * HR
               VFL = F2 * VR

  ざっくりとした規準として、F1 = 1.30 と F2 = 1.05 として下さい。 (``フ
  レームサイズの計算''を参照してください。) さて特にこの同期周波数である
  HSF を取り上げてみます。現在の所の仮定はドットクロック DCF のためのす
  べての数値は既に決定された再描画速度 RR、例えば HSF は関数 RR(DCF) で
  与えられます。これば次の割り算で得られます。

  再描画速度はフレームサイズの積でドットクロックを割ったものです。:

               RR = DCF / (HFL * VFL)          (*)

  他には、水平フレーム長はドットクロックを水平同期周波数で割ったもので
  す。:

               HFL = DCF / HSF                 (**)

  VFL は HFL を 2 つの改定値で切り詰めたものです。:

               VFL = F2 * VR
                   = F2 * (HR / AR)
                   = (F2/F1) * HFL / AR        (***)

  (**) と (***) を (*) に代入すると:

               RR = DCF / ((F2/F1) * HFL**2 / AR)
                  = (F1/F2) * AR * DCF * (HSF/DCF)**2
                  = (F1/F2) * AR * HSF**2 / DCF

  HSF, F1, F2 と AR を固定すると、ダイアグラムは双曲線になります。この曲
  線の中の最小と最大の水平同期周波数で許容領域の残りの境界線が得られま
  す。

  特性領域と直線の交線が特定の解像度を表します。これは (*) 式を元にして
  2 番目の仮定になります。:

               RR = DCF / (HFL * VFL) = DCF / (F1 * HR * F2 * VR)

  すべての解像度でこのような線を描く事によって興味深いのは、解像度、ク
  ロック周波数とモニタの再描画速度の関係に密接な関係があるという事です。
  これらの線はモニタの特性には依存していませんが、2 つ目の仮定には依存し
  ています。

  modeplot ツールはこの作業を簡単にします。modeplot -?  と入力して制御オ
  プションを見てください。典型的な実行形式は次のようです。:

               modeplot -t "Swan SW617" -b 85 -v 50 90 -h 31 58

  -b オプションはビデオの帯域幅を指定します。-v と -h は水平と垂直同期周
  波数の範囲を指定します。

  modeplot の出力を読むときは、近似表現のみであることを常に覚えておいて
  下さい。例えば、最小同期信号幅から得られた HFL の上限を無視して、仮定
  と殆んどものとします。従って ``全体のまとめ'' に示すように、(幾つかの
  黒魔術を伴って) 詳細な計算式に代入する事はありません。しかしながら、可
  能であり、トレードオフがあることが分かればすっきりするでしょう。

  16.  協力者、提供者について

  この文書の最初の原型は Chin Fang <fangchin@leland.stanford.edu> が書き
  ました。

  Eric S. Raymond <esr@snark.thyrsus.com> が書き直し、再編制して、 Chin
  Fang の元文書を分かりやすくなるように大規模に書き換えました。この過程
  で、Bob Crosson <crosson@cam.nist.gov> による色々な how-to 文書を統合
  しました。

  インタレースモードに関する資料は主として David Kastrup
  <dak@pool.informatik.rwth-aachen.de> によります。

  Martin Lottermoser <Martin.Lottermoser@mch.sni.de> は gnuplot を用いて
  モードダイアグラムを作画する事の着想に寄与し、modeplot の背後にある数
  学的な解析を行いました。 ESR が配布する modeplot は Martin の元の
  gnuplot の一件の場合のスクリプトから再設計と一般化を行いました。
  [訳注 : ESR は Eric S. Raymond です。]

  $XFree86: 
  02/20 23:10:30 dawes Exp $

  $XConsortium: VidModes.sgml /main/7 1996/02/21 17:46:17 kaleb $

  17.  日本語訳について

  この日本語訳は岡本一幸さん <ikko-@pacific.rim.or.jp> と Hiro Sugawara
  さん<hiro@arkusa.com> の 3.3.2 版の翻訳をベースに X Japanese
  Documentation Project が更新を行ったものです。 (更新: 坂田智之
  <sakata@hoehoe.sci.ibaraki.ac.jp>
  <mailto:sakata@hoehoe.sci.ibaraki.ac.jp>)。

