XCOMM $XConsortium: Imakefile /main/16 1996/10/28 05:13:04 kaleb $




XCOMM $XFree86: xc/programs/Xserver/hw/xfree86/doc/sgml/Imakefile,v 3.25.2.20 1999/10/21 12:07:53 hohndel Exp $

#include <Server.tmpl>
#include <lnxdoc.rules>

#if (defined(BSD386Architecture) || BuildAllDocs) && 0
LinuxDocReadmeTarget(Bsdi)
#endif
#if defined(FreeBSDArchitecture) || BuildAllDocs
LinuxDocReadmeTarget(FreeBSD)
#endif
#if defined(NetBSDArchitecture) || BuildAllDocs
LinuxDocReadmeTarget(NetBSD)
#endif
#if defined(OpenBSDArchitecture) || BuildAllDocs
LinuxDocReadmeTarget(OpenBSD)
#endif
#if (defined(i386MachArchitecture) || BuildAllDocs) && 0
LinuxDocReadmeTarget(Mach)
#endif
#if defined(LinuxArchitecture) || BuildAllDocs
LinuxDocReadmeTarget(Linux)
LinuxDocReadmeTarget(fbdev)
#endif
# if defined(DguxArchitecture) || BuildAllDocs
LinuxDocReadmeTarget(DGux)
# endif
#if defined(LynxOSArchitecture) || BuildAllDocs
LinuxDocReadmeTarget(LynxOS)
#endif
#if (defined(MinixArchitecture) || BuildAllDocs) && 0
LinuxDocReadmeTarget(Minix)
#endif
#if (defined(AmoebaArchitecture) || BuildAllDocs) && 0
LinuxDocReadmeTarget(Amoeba)
#endif
#if defined(SVR3Architecture) || BuildAllDocs
# if defined(i386ScoArchitecture) || BuildAllDocs
LinuxDocReadmeTarget(SCO)
# endif
# if defined(i386IscArchitecture) || BuildAllDocs
LinuxDocReadmeTarget(isc)
# endif
# if defined(OS2Architecture) || BuildAllDocs
LinuxDocReadmeTarget(OS2)
LinuxDocTargetLong(OS2note.sgml,OS2.Notes,OS2Notes)
# endif
# if 0
LinuxDocReadmeTarget(SVR3)
# endif
#endif
#if defined(SVR4Architecture) || BuildAllDocs
# if defined(SunArchitecture) || BuildAllDocs
LinuxDocReadmeTarget(SOLX86)
# endif
# if !defined(SunArchitecture) || BuildAllDocs
LinuxDocReadmeTarget(SVR4)
# endif
#endif

/* Hardware docs */
LinuxDocReadmeTarget(DECtga)
LinuxDocReadmeTarget(I128)
LinuxDocReadmeTarget(Mach32)
LinuxDocReadmeTarget(Mach64)
LinuxDocReadmeTarget(MGA)
LinuxDocReadmeTarget(NVIDIA)
LinuxDocReadmeTarget(Oak)
LinuxDocReadmeTarget(P9000)
LinuxDocReadmeTarget(Video7)
LinuxDocReadmeTarget(S3)
LinuxDocReadmeTarget(S3V)
LinuxDocReadmeTarget(SiS)
LinuxDocReadmeTarget(W32)
LinuxDocReadmeTarget(WstDig)
LinuxDocReadmeTarget(apm)
LinuxDocReadmeTarget(ark)
LinuxDocReadmeTarget(agx)
LinuxDocReadmeTarget(ati)
LinuxDocReadmeTarget(chips)
LinuxDocReadmeTarget(cirrus)
LinuxDocReadmeTarget(cyrix)
LinuxDocReadmeTarget(epson)
LinuxDocReadmeTarget(mouse)
LinuxDocReadmeTarget(neo)
LinuxDocReadmeTarget(rendition)
LinuxDocReadmeTarget(3DLabs)
LinuxDocReadmeTarget(trident)
LinuxDocReadmeTarget(tseng)
LinuxDocReadmeTarget(i740)
LinuxDocReadmeTarget(i810)
LinuxDocReadmeTarget(r128)

/* Main docs */
LinuxDocTargetLong(CPYRIGHT.sgml,COPYRIGHT,COPYRIGHT)
LinuxDocTargetLong(RELNOTE.sgml,RELNOTES,RELNOTES)
LinuxDocReadmeTarget(Config)
LinuxDocTarget(BUILD)
LinuxDocTarget(README)
LinuxDocTargetLong(QStart.sgml,QuickStart.doc,QuickStart)
LinuxDocTarget(DocIndex)

/* Other docs */
LinuxDocReadmeTarget(LinkKit)
LinuxDocReadmeTarget(clkprog)
LinuxDocTarget(xinput)
LinuxDocTargetLong(VidModes.sgml,VideoModes.doc,VideoModes)
LinuxDocTargetLong(VGADriv.sgml,VGADriver.Doc,VGADriver)

InstallLinkKitNamedNonExec(README.LinkKit,README,$(LINKKITDIR))
InstallLinkKitNonExecFile(VGADriver.Doc,$(LINKKITDIR)/VGADriverDoc)

#if defined(LinuxArchitecture) || BuildAllDocs
LinkSourceFile(fbdev.sgml,$(XF68SRC)/doc/sgml)
#endif
