<!DOCTYPE linuxdoc PUBLIC "-//XFree86//DTD linuxdoc//EN">
<article>
 
<!-- made up title -->
<!--
<title> Information for ISC Users
-->
<title> ISC ユーザ向けの情報
<author> Michael Rohleder
<date> 11 January 1998
<trans> The X Japanese Documentation Project
<tdate> 2 February 1999
<toc>

<!--
<sect> X11R6/XFree86&tm; on Interactive Unix <p>
-->
<sect> Interactive Unix 上での X11R6/XFree86&tm;  <p>

<!--
This document provides some additional information about
compiling and using X11R6 and XFree86 on your
Interactive Unix, also referred to as ISC.
-->
本ドキュメントには、 Interactive Unix(ISC とも呼ばれます)上で X11R6 と
XFree86 をコンパイル・使用するための追加情報が書かれています。

<!--
If you have any suggestions, comments, fixes or ideas regarding
X11R6/XFree86 on Interactive Unix, send e-mail to

<htmlurl url="mailto:michael.rohleder@stadt-frankfurt.de" 
    name="michael.rohleder@stadt-frankfurt.de"><p>
Bug Reports should be sent to<p>
<em>XFree86@XFree86.Org</em><p>
Questions or anything else should be posted to the NewsGroup<p>
<em>comp.windows.x.i386unix</em><p>
-->
Interactive Unix 上での X11R6/XFree86 に関する提案・コメント・修正・ア
イディアがあれば
<htmlurl url="mailto:michael.rohleder@stadt-frankfurt.de" 
    name="michael.rohleder@stadt-frankfurt.de">
までメールを送ってください。<p>
バグ報告は必ず
<em>XFree86@XFree86.Org</em>
当てに送ってください。<p>
質問等はニュースグループ <em>comp.windows.x.i386unix</em> に投稿してく
ださい。<p>

<!--
There is currently no support for shared Libraries so it will be filespace
consuming if you want to build X11-clients with X11R6. Best you mix X11R6
Server with X11R5 and X11R4 clients. And only compile clients who need the 
new facilities provided in the X11R6 Libraries against them.
-->
現在は共有ライブラリがサポートされていないので、X11R6 で X11 クライア
ントを作ろうとするとファイル空間を大量に使ってしまいます。一番良い方法
は、X11R6 のサーバを X11R5 や X11R4 のクライアントと組み合わせて使うこ
とです。そして、X11R6 のライブラリで新しく用意された機能が必要なクライ
アントだけをコンパイルすると良いでしょう。

<!--
<sect> Things needed for compiling the sources<p>
-->
<sect> ソースをコンパイルするために必要なもの<p>

<descrip>
    <tag> gcc </tag>
<!--
          Use the highest number for x you found.
          Fresco will only build 2.6.3 and later.
	  I'd tried gcc Version 2.5.8, 2.6.0, 2.6.2, 2.6.3 and 2.7.2.
          Current: 2.7.2.3
          <p>
-->
x の数字ができるだけ大きいものを使いましょう。Fresco は 2.6.3 以降でし
か構築できません。筆者は gcc のバージョン 2.5.8, 2.6.0, 2.6.2, 2.6.3,
2.7.2 を試しました。最新バージョンは 2.7.2.3 です。<p>
<!--
          Since 2.6.3 the current source tree should be able to compile
          with a little bit more Optimization:
          <tt> &num;define DefaultCDebugFlags -O3 -fomit-frame-pointer</tt>
          inside xf86site.def to overwrite the default -O2.
          <p>
-->
2.6.3 以降では、少しオプティマイズを増やすだけでカレントソースツリーを
コンパイルできるはずです:
xf86site.def 内で
<tt> &num;define DefaultCDebugFlags -O3 -fomit-frame-pointer</tt>
を指定して、デフォルトの -O2 を上書きしてください。
<!--
          With 2.7.x you must specify 
          <tt>&num;define UsePosix               YES</tt> inside xf86site.def.
          This is necessary to build the sources successfully.
          Versions prior to 2.7.0 could define it, but don't need it for a
          clean build.
-->
2.7.x の場合、xf86site.def 内で
<tt>&num;define UsePosix               YES</tt>
を指定しなければなりません。これはソースをうまく構築するために必要です。
2.7.0 より前のバージョンでもこれを定義してかまいませんが、警告を出さず
に構築するためには必要ありません。
    <tag> libg++-2.x.x </tag>
<!--
          The needed g++ Libraries for use with g++ 2.x.x. As this is only 
          necessary for Fresco, it isn't needed anymore since X11R6.1.
-->
g++ 2.x.x で使うための g++ ライブラリが必要です。これは Fresco のため
に必要なだけなので、X11R6.1 以降では不要です。
    <tag> binutils </tag>
<!--
          You could use the assembler and linker
          the assembler is most preferred,and the linker is needed
          at least if you want to link libFresco.a within a Program.
          Don't use strip and ar/ranlib, the first generates buggy binaries
          when stripping (at least on my machines) and the last requires 
          the use of ranlib after creating an archive, this is not configured.
          Current: 2.8.1.0.15 (Used: as, ld, ar, strip)
-->
アセンブラとリンカを使うことがあるかもしれません。アセンブラはできるだ
けあったほうが望ましく、プログラムに libFresco.a をリンクしたければ、
少なくともリンカは必要になります。strip を ar や ranlib と組み合わせて
使ってはいけません。strip と ar を組み合わせると(少なくとも筆者のマシ
ンでは) strip を行ったときにバグっぽいバイナリができます。また、ar と
組み合わせて使うとアーカイブを作った後に ranlib を使わなければならない
のですが、その設定はされていません。現在のバージョンは 2.8.1.0.15 です
(as, ld, ar, strip を使います)。
    <tag> gnu-malloc </tag>
<!--
          Due to better memory usage we should use GNU's malloc library
          on systems where possible. 
-->
メモリをうまく利用するために、GNU の malloc ライブラリが使えるシステム
ではこれを使うべきです。
<!--
          Enable <tt>&num;define UseGnuMalloc YES</tt>
	  inside xf86site.def or within the Linkkit site.def. 
-->
xf86site.def 内または Linkkit の site.def 内で
<tt>&num;define UseGnuMalloc YES</tt> を有効にしてください。

<!--
          Enable and set <tt>&num;define GnuMallocLibrary</tt>
	  to your needs, if it isn't like the default 
          <tt>-L/usr/local/lib -lgmalloc</tt>.
-->
GNU malloc ライブラリがデフォルトの
<tt>-L/usr/local/lib -lgmalloc</tt> でないようであれば、必要に応じて
<tt>&num;define GnuMallocLibrary</tt>
を有効にし、値を設定してください。

<!--
    <tag> inline-math (optional)</tag>
-->
    <tag> inline-math (省略可能)</tag>
<!--
          This is the "original" inline-math package available at your
          favorite Linux Mirror. 
-->
これは、お近くの Linux のミラーサイトで入手できる「オリジナル」の
inline-math パッケージです。

<!--
          Use <tt>&num;define UseInlineMath YES</tt>
	  inside host.def to enable it. Please note the changes section
          what else to do, to use this package.
-->
host.def 内で <tt>&num;define UseInlineMath YES</tt> を使い、これを有
効にしてください。このパッケージを使うためには他にも作業が必要なので、
次の修正に関するセクションを参照してください。

</descrip>          

<!--
<sect> Changes to the System Header Files<p>
-->
<sect> システムのヘッダファイルの修正<p>

<!--
You have to change some of the standard header files supplied with
your version of Interactive. You also need to change some of the include
files in the gcc-lib/include directory.
-->
Interactive Unix 付属の標準ヘッダファイルを少し修正しなければなりませ
ん。また、gcc-lib/include ディレクトリのヘッダファイルも少し修正する必
要があります。

<!--
Let us say the gcc-files are in directory 
-->
次のディレクトリを gcc 関連ファイルのディレクトリとし、これを
<tt>"gcc-lib"</tt> と呼ぶことにします:

<tt>/usr/local/lib/gcc-lib/i[345]86-isc[34].[0-9]/2.6.x</tt>

<!--
referred to as <tt>"gcc-lib"</tt>
-->

<!--
     <sect1><tt>/usr/include/sys/limits.h</tt><p>
	and <tt>gcc-lib/include/sys/limits.h</tt> 
-->
     <sect1><tt>/usr/include/sys/limits.h</tt><p>
	および <tt>gcc-lib/include/sys/limits.h</tt> 

          <verb>
          #ifndef OPEN_MAX
          #ifdef ISC
          #define OPEN_MAX        256
          #else
          #define OPEN_MAX        20
          #endif
          #endif
          </verb>
<!--
          <tt>OPEN_MAX</tt> had to be increased to prevent
          Xlib Errors (max no. of clients reached).
-->
          Xlib でエラー(クライアント数が最大値になってしまう)が起こら
          ないようにするため <tt>OPEN_MAX</tt> を
<p>
     <sect1><tt>/usr/include/sys/ioctl.h</tt><p>
多重インクルードを避けるため、ファイルの中身全体を次の #ifdef で囲みま
す。
<!--
        surrounded by 
-->
        <verb>
        #ifndef _IOCTL_H 
        #define _IOCTL_H
        ...
        #endif
        </verb>
<!--
        to prevent multiple includes.
-->
<p>
<!--
     <sect1><tt>/usr/include/errno.h</tt><p>
        (and the corresponding gcc-include-file)
-->
     <sect1><tt>/usr/include/errno.h</tt><p>
        (および、 gcc の対応するインクルードファイル)
<!--
        add <verb>
        #include <net/errno.h>
        </verb>
        because of <bf>EWOULDBLOCK</bf> undefined in several places 
        regarding lbx.
-->
        <verb>
        #include <net/errno.h>
        </verb> を追加します。これは、lbx 関係で数ヶ所
        <bf>EWOULDBLOCK</bf>  が未定義になるためです。
<!--
        Surround <tt>/usr/include/net/errno.h</tt> with

        <verb>
        #ifndef _NET_ERRNO_H
        #define _NET_ERRNO_H
        ...
        #endif
        </verb>

        to prevent multiple includes were <tt>&lt;net/errno.h&gt;</tt>
        is explicit included from the sources.
-->
<tt>/usr/include/net/errno.h</tt> を

        <verb>
        #ifndef _NET_ERRNO_H
        #define _NET_ERRNO_H
        ...
        #endif
        </verb>

で囲みます。これは、<tt>&lt;net/errno.h&gt;</tt> がソースから明示的に
インクルードされると多重インクルードが起こるのを避けるためです。
<p>
      <sect1><tt>/usr/include/rpc/types.h</tt><p>
<!--
         copy this file to <tt>gcc-lib/include/rpc/types.h</tt>
         and change the declaration of <bf>malloc()</bf> to

         <verb>
         #if !defined(__cplusplus)
         extern char *malloc();
         #endif
         </verb>

         Note that this is only necessary if you want to build Fresco
-->
このファイルを <tt>gcc-lib/include/rpc/types.h</tt> にコピーし、
<bf>malloc()</bf> の定義を

         <verb>
         #if !defined(__cplusplus)
         extern char *malloc();
         #endif
         </verb>

のように変更します。

この作業は Fresco を構築する場合だけに必要な点に注意してください。
<p>
      <sect1><tt>/usr/include/sys/un.h</tt><p>
<!--
         such a file does not exist on Interactive. You may like to generate
         it, if you don't like a warning from depend. It isn't needed to compile
         the sources successfully.
-->
このファイルは Interactive Unix には存在しません。depend からのウォー
ニングが嫌ならば、このファイルを作っても構いません。これはソースを正常
にコンパイルするためには必要ありません。

<!--          
         You could use the following to produce it:
-->
un.h を作るには以下の内容が使えるでしょう:
         <verb>
         #ifndef X_NO_SYS_UN
         struct  sockaddr_un {
                 short   sun_family;             /* AF_UNIX */
                 char    sun_path[108];          /* path name (gag) */
         };
         #endif
         </verb>
<p>
      <sect1><tt>/usr/include/math.h</tt><p>
<!--
         To use the Inline Math package you have to change your existing
         math.h. Please note, the way I include the new Header file, is
         different than suggested in inline-math's README.
-->
inline-math パッケージを使うには、既存の math.h を変更しなければなりま
せん。筆者がヘッダファイルを組み込んだ方法は、inline-math パッケージの
README に書かれている方法と異なる点に注意してください。

<!--          
         Please add the following at the bottom of math.h, before the last 
         #endif
-->
以下の内容を、 math.h の終わりの部分の最後の #endif の前に追加してくだ
さい:
         <verb>
#if defined(UseInlineMath)

/* Needed on ISC __CONCAT, PI */
#ifndef __CONCAT
/*
 * The __CONCAT macro is used to concatenate parts of symbol names, e.g.
 * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.
 * The __CONCAT macro is a bit tricky -- make sure you don't put spaces
 * in between its arguments.  __CONCAT can also concatenate double-quoted
 * strings produced by the __STRING macro, but this only works with ANSI C.
 */
#if defined(__STDC__) || defined(__cplusplus)
#define __CONCAT(x,y)   x ## y
#define __STRING(x)     #x
#else   /* !(__STDC__ || __cplusplus) */
#define __CONCAT(x,y)   x/**/y
#define __STRING(x)     "x"
#endif  /* !(__STDC__ || __cplusplus) */
#endif

#ifndef PI
#define PI M_PI
#endif

#include "/usr/local/include/i386/__math.h"
#endif
         </verb>
         
         

<sect> make World <p>
<code>
BOOTSTRAPCFLAGS="-DISC [-DISC30 | -DISC40] -DSYSV [-Di386]"
</code>

<descrip>
<tag>-DISC -DISC30</tag>
<!--
	these two defines are necessary to build the release
        I don't know if the build will succeed for ISC versions 
        prior than 3.x
-->
<!-- 原文もヘンでないかい? -->
この 2 つのオプションはバージョン 3.x の ISC で構築を行うために必要で
す。筆者は、3.x より前の ISC でうまく構築できるどうかは知りません。

<tag>-DISC40</tag>
<!--
	are only for getting the ISC version and therefore
        set the HasSymLinks to Yes ('cause symbolic linking
        were only supported from Version 4.x using the S5L Filesystem)<p>
-->
これは ISC バージョン 4.x 専用のオプションで、したがって HasSymLinks
を YES に設定します(なぜなら、シンボリックリンクは S5L ファイルシステ
ムを採用しているバージョン 4.x 以降でないとサポートされていないからで
す)。<p>
<!--
        If you could use long filenames, you could enable
        the installation of expanded Manual Pages by including
        <tt> &num;define ExpandManNames	YES </tt>
        inside xf86site.def.<p>
-->
ロングファイルネームが使えるならば、xf86site.def に
<tt> &num;define ExpandManNames	YES </tt> を含めることで拡張マニュアル
ページをインストールすることができます。<p>
<!--
	A build on ISC 4.x only needs -DISC40 defined in the BOOTSTRAPCFLAGS 
        ( -DISC30 will be included automatically ).<p>
-->
ISC 4.x で構築を行う場合には、BOOTSTRAPCFLAGS で -DISC40 だけを定義す
れば大丈夫です(-DISC30 は自動的にインクルードされます)。<p>
<!--
        Note: due to some incompatibilities between ISC 4.0 and 4.1, the default
        is to build for ISC4.0, even if you build on 4.1.
        If you want to build only for 4.1 you should
        set <tt> &num;define IscCompileVersion       410 </tt> inside your
        host.def.<p>
-->
注意: ISC 4.0 と 4.1 には互換でない部分が少しあるため、ISC 4.1 で構築
を行った場合でもデフォルトでは ISC 4.0 用の構築を行います。4.1 専用の
構築がしたければ、host.def で
<tt> &num;define IscCompileVersion       410 </tt>
を設定してください。<p>
<!--
        (the fchmod function isn't available on 4.0, so it won't compile,
        and binaries from 4.1 won't run cause of the unsupported System call
        The libraries build for 4.1 couldn't be used with 4.0 Systems, due
        to some functions not available on 4.0)
-->
<!-- ここも原文がヘン(ピリオド抜け?)でないかい? -->
(fchmod 関数は 4.0 では利用できないので、この関数があるとコンパイルが
できませんし、4.1 から持ってきたバイナリはサポートされていないシステム
コールがあるため動作しません。4.1 用に構築したライブラリは、4.0 では利
用できない関数を含むので、4.0 のシステムでは動作しません。

<tag>-DSYSV &lsqb;-Di386&rsqb;</tag>
<!--
	standard defines for SystemV Release3 on x86 platform.
	You don't need to explicitly define -Di386 because
	this is pre-defined in /lib/cpp.
-->
x86 プラットフォームにおける SystemV リリース 3 用の標準の定義です。
-Di386  は /lib/cpp で予め定義されているので、明示的に定義する必要はあ
りません。

</descrip>

<!--
<sect> linear Addressing <p>
-->
<sect> リニアアドレッシング <p>

<itemize>
<!--
<item>Compiling &hellip; <p>
-->
<item>コンパイル<p>
<!--
If you want to include support for linear addressing into the server binaries,
you have to define 
<verb>
#define HasSVR3mmapDrv		YES
</verb>
in xf86site.def.
This is necessary to get the correct setup to be defined for the build.
-->
サーバのバイナリにリニアアドレッシングのサポートを入れたければ、
xf86site.def ファイルに
<verb>
#define HasSVR3mmapDrv		YES
</verb>
という行を定義しなければなりません。
<!--
You need the mmap-2.2.3 driver installed on your system.
If you don't have the mmap-2.2.3 driver installed, you could use the driver
source in the file 
<verb>
xc/programs/Xserver/hw/xfree86/etc/mmapSVR3.shar
</verb>
or
<verb>
/usr/X11R6/lib/X11/etc/mmapSVR3.shar
</verb>
Build and install the driver as instructed. You'll need the file
/usr/include/sys/mmap.h for compiling the X11R6/XFree86 source tree,
with linear addressing enabled.
-->
システムには mmap-2.2.3 ドライバがインストールされている必要があります。
mmap-2.2.3 がインストールされていなければ、
<verb>
xc/programs/Xserver/hw/xfree86/etc/mmapSVR3.shar
</verb>
または
<verb>
/usr/X11R6/lib/X11/etc/mmapSVR3.shar
</verb>
ファイル内にあるドライバのソースを利用できます。ドライバの構築とインス
トールは説明されている手順通りに行ってください。リニアアドレッシングを
有効にして X11R6/XFree86 ソースツリーの構築を行うには、
/usr/include/sys/mmap.h 
ファイルが必要です。

<!--
<item>Using &hellip; <p>
-->
<item>使用 <p>

<!--
To use the linear address-mapping of the framebuffer you need the mmap Driver
by Thomas Wolfram (Version 2.2.3) installed in your Kernel.
If you have installed it, most servers will use linear addressing by default.
Others may require
setting the 
<verb>
Option "linear"
</verb>
in your XF86Config.   Check the appropriate manual pages for details.
Maybe you need also the MemBase specified in XF86Config. Please refer to the 
appropriate README of your Card/Server, for 
<bf>How to use..</bf>.
Note that the P9000 server will not work at all unless linear addressing
is available.
-->
フレームバッファのリニアアドレスマッピングを使うためには、
Thomas Wolfram さんが作成した mmap ドライバ(バージョン 2.2.3)をカーネ
ルにインストールする必要があります。このドライバを既にインストールして
いる場合には、ほとんどのサーバはデフォルトでリニアアドレッシングを使う
でしょう。そうでないサーバの場合には、XF86Config ファイルで
<verb>
Option "linear"
</verb>
を指定する必要があるかもしれません。詳しくは適切なオンラインマニュアル
を参照してください。また、XF86Config で MemBase を指定する必要もあるか
もしれません。<bf>使い方</bf>については、カードやサーバに関する適切な
README ファイルを参照してください。
リニアアドレスが有効でなければ、P9000 サーバは全く動作しないだろうとい
う点に注意してください。

<!--
I could only test these cards against the linear addressing.
-->
筆者がリニアアドレッシングに関するテストを行ったのは以下のカードだけで
す。
<itemize>
	<item>Spea/V7 Vega - clgd5428 - VLB<p>
<!--
	   with 32MB MainMemory installed I couldn't use it.
           My tests with different mappings into the address space
           results in no Graphics displayed or a spontaneous reboot.<p>
-->
メインメモリを 32MB 積んだマシンでは使うことができませんでした。アドレ
ス空間に対して色々なマッピングを行うテストでは、グラフィックスが全く表
示されなかったり、マシンがいきなりリブートするという結果になりました。<p>
	<item>ATI GUP      - mach32   - VLB<p>
<!--
           with 32MB MainMemory installed I could map the CardMemory
           at MemBase 0x07c00000. I could work with all clients
           until I try to activate a Motif 1.1.1 InputField inside a 
           Motif Client like Mosaic-2.4 or xplan. This results in a 
           crash of the XServer. <p>
           <verb>
           !!! You could work around this !!!
           </verb>
           Expand your .Xdefaults with
           <verb>
           *blinkRate:			0
           *cursorPositionVisible:	false
           </verb>
-->
32MB のメインメモリを積んだマシンで、カードのメモリを MemBase
0x07c00000 にマップすることができました。ほとんどのクライアントが動作
しましたが、それは Motif 1.1.1 の InputField ウィジェット(Mosaic-2.4
や xplan のような Motif 1.1.1 クライアントで使われています)をアクティ
ブにしようとするまででした。これにより、X サーバがクラッシュしてしまい
ました。<p>
           <verb>
           !!! しかし、この問題は回避することができます。!!!
           </verb>
.Xdefaults ファイルに
           <verb>
           *blinkRate:			0
           *cursorPositionVisible:	false
           </verb>
という記述を加えてください。
<!--
           This bug seems to be fixed since 3.1.2, and therefore the 
           workaround is not needed anymore.
-->
このバグは 3.1.2 以降では修正されているようなので、この回避方法はもは
や必要でなくなりました。
	<item>ELSA Winner 2000PRO/X Revision G<p>
<!--
           if you experience a Problem with this Card you could try to
           use the older Chipset Driver instead "newmmio".
           <p>If you declare 
           <verb>
           Chipset "mmio_928"
           </verb>
           inside your XF86Config, it may be alright again.<p>
           With the current XF86_S3 I don't encounter any problem.
-->
このカードで問題が起こった場合は、"newmmio" ではなく古いチップセットの
ドライバを試すと良いでしょう。<p>
XF86Config ファイルに
           <verb>
           Chipset "mmio_928"
           </verb>
という宣言があれば、重ねて安心でしょう。<p>
筆者は、最新の XF86_S3 を使っていて問題に出会ったことはありません。
</itemize>

</itemize>

<!--
<sect>XKeyboard Extension<p>
-->
<sect>XKeyboard 機能拡張<p>

<itemize>
<!--
<item>Sample Setup &hellip; <p>
-->
<item>設定例<p>
<!--
Here is a sample XKeyboard Definition to include inside the Keyboard Section
of your XF86Config File.
-->
XF86Config ファイルの Keyboard セクションに書けるような XKeyboard の定
義例を以下に示します。
<verb>
    Xkbkeycodes "xfree86"
/*    XkbSymbols  "us(pc101)+de_nodead"  */
/*    This has changed between 3.1.2E and 3.1.2F */
/*    it is now:                                 */
    XkbSymbols  "us(pc102)+de(nodeadkeys)"
    XkbTypes    "default"
    XkbCompat   "default"
    XkbGeometry "pc"
</verb>

<!--
or you could use this one with the new Options:
-->
あるいは、新しいオプションを使って以下のように指定することもできます。
<verb>
   XkbRules        "xfree86"
   XkbModel        "pc102"
   XkbLayout       "de"
   XkbVariant      "nodeadkeys"
</verb>

</itemize>

<!--
<sect> Multibuffer Extension <p>
-->
<sect> マルチバッファ機能拡張 <p>

<!--
This is an obsolete Extension. Anyway, if you want to include this Extension 
inside your build, you have to add:
 <tt>&num;define BuildMultibuffer        YES</tt> inside xf86site.def
Please note, this Extension should be disabled when building the Loader Server.
-->
この機能拡張は古くて使われないものになってしまいました。それでも、構築
時にこの機能拡張を組み込みたいならば、xf86site.def に
 <tt>&num;define BuildMultibuffer        YES</tt> 
を追加してください。ローダサーバを構築するときには、この機能拡張は無効
にしておくべきである点に注意してください。

<!--
<sect> Sample Definitions <p>
-->
<sect> 定義ファイルのサンプル <p>

<!--
This is my current host.def, if I build the sources. (So no more changes were
necessary in xf86site.def, either it isn't to bad to have a look inside it ;-)
-->
筆者が現在ソースからの構築を行う際に使っている host.def を以下に示しま
す。(したがって、xf86site.def をこれ以上変更する必要はありませんし、中
身を読むのも悪くない考えです ;-)
<verb>

#ifdef BeforeVendorCF

/* ISC 4.1Mu - build only for 4.1
#define IscCompileVersion       410
*/

/* Use inline Math from linux ;-) package inline-math-2.6.tar.gz */
/* should be available on your favorite linux ftp                */
# define UseInlineMath		YES

/* Use cbrt from liboptm.a (Interactive icc Compiler) */
/*
*/
# define HasCbrt		YES

/* Use GNUs MallocLibrary (and the Location for the Lib)             */
# define UseGnuMalloc		YES
# define GnuMallocLibrary	-L/usr/local/lib -lgnumalloc

/* Build Xvfb                                                        */
# define XVirtualFramebufferServer	YES

/* Use mmap Driver                                                   */
# define HasSVR3mmapDrv		YES

/* Expand Manual Pages (needs S5L)                                   */
# define ExpandManNames		YES

/* Has LinuxDoc (and the Location for LinuxDoc / only HTML and Text) */
# define HasLinuxDoc		YES
# define BuildLinuxDocHtml	YES
# define BuildAllDocs		YES
# define LinuxDocDir		/usr/local/lib/linuxdoc-sgml

/* Install Config's for xdm, xfs, and xinit */
# define InstallXinitConfig    YES
# define InstallXdmConfig      YES
# define InstallFSConfig               YES

#define BuildChooser		YES

/* for the new XF86Setup Util */
#define HasTk			YES
#define HasTcl			YES

#endif /* BeforeVendorCF */
</verb>
<!--
<sect> Installation <p>
-->
<sect> インストール <p>

<!--
After your <bf>make World BOOTSTRAPCFLAGS="&hellip;</bf> succeed, 
<verb>
make install
</verb>
to install in /usr/X11R6. Make sure you have enough space, and /usr/X11R6 
exists either as a directory or a symlink to another directory maybe in another
filesystem.
<verb>
make install.man
</verb>
to install the compressed nroff versions of the manual pages into 
/usr/X11R6/man. This directory will be generated if it doesn't exist.
<verb>
make install.linkkit
</verb>
to install the server binary LinkKit into /usr/X11R6/lib/Server.
-->
<bf>make World BOOTSTRAPCFLAGS="&hellip;</bf> が正常終了したら、
<verb>
make install
</verb>
を実行して /usr/X11R6 にインストールしてください。十分なディスク容量が
あることと、/usr/X11R6 がディレクトリや(たぶん)他のファイルシステムの
他のディレクトリへのシンボリックリンクとして存在することを確かめてくだ
さい。次に
<verb>
make install.man
</verb>
を実行して、圧縮した nroff 形式のオンラインマニュアルを /usr/X11R6/man
にインストールしてください。このディレクトリが存在しなければ、自動的に
作成されます。それから
<verb>
make install.linkkit
</verb>
を実行して、サーバのバイナリリンクキットを /usr/X11R6/lib/Server にイ
ンストールしてください。

<!--
<code>
       You could tune the Kernel using the command-file
       
       /usr/X11R6/lib/X11/etc/xf86install
       
       This will increase the available pseudo devices, 
       some Tunable Parameters and install some files 
       to use inside sysadm. You could also install 
       some additional Fonts and Terminal files.
</code>
-->
<!-- some Tunable Parameters の前に何か動詞がいるんじゃなかろうか -->
<code>
       コマンドファイルである
       
       /usr/X11R6/lib/X11/etc/xf86install

       を用いてカーネルをチューンすることができます。このファイルは利
       用できる仮想デバイスを増やし、パラメータをいくつか調整し、
       sysadm 内部で使われるファイルをいくつかインストールします。追加
       のフォントと端末設定ファイルをインストールすることもできます。
</code>

<!--
       You also should increase MAXUMEM to its maximum, else
       programs may die with:
-->
また、MAXUMEM は最大値まで増やすべきです。さもないと、プログラムは次の
ようなメッセージを出力して止まってしまうかもしれません:
<code>
X Error of failed request:  BadAlloc (insufficient resources for operation)
  Major opcode of failed request:  53 (X_CreatePixmap)
  Serial number of failed request:  37791
  Current serial number in output stream:  37822
  Widget hierarchy of resource: unknown
</code>

<!--
<sect>Using &hellip; <p>
-->
<sect>使い方 &hellip; <p>

<itemize>
<item>Xprt:<p>
<!--
       The new Xprint Server is configured to use lpr as its print helper
       so you have to install and configure lpr to use Xprt.<p>
-->
新しい Xprint サーバは lpr を印刷用の補助プログラムとして使うように設
定されます。したがって、Xprt を使うためには lpr のインストール・設定を
行う必要があります。

<item>Keyboard:<p>
<!--
       You don't need any modmap-File to get your keyboard
       working with any iso-8859-1 Font. Simply enable 
-->
iso-8859-1 フォントをキーボードで入力で入力するために modmap ファイル
は必要ありません。単に、XF86Config ファイルの Keyboard セクションで以
下の指定を行ってください:

   <itemize>
	<item>LeftAlt  Meta

	<item>RightAlt ModeShift

	<item>RightCtl Compose
   </itemize>

<!--
        in your XF86Config - Section "Keyboard"
-->

<item>xpcterm: <p>
<!--
        if you want to get the German 'Umlaut' inside your ISC X11R4 client
        xpcterm when you are using the ega/vga font. Set up the
        user's .Xdefaults to contain:
-->
ISC 付属の X11R4 クライアントである xpcterm で EGA/VGA フォントを使っ
ているときに、ドイツ語の「ウムラウト」を入力したい場合の設定です。
ユーザの .Xdefaults ファイルに以下の内容を設定してください:
        <verb>
         XEga*AT386.Translations: #override \
                   Shift<Key>odiaeresis: string(0x99) \n\
                        <Key>odiaeresis: string(0x94) \n\
                   Shift<Key>adiaeresis: string(0x8e) \n\
                        <Key>adiaeresis: string(0x84) \n\
                   Shift<Key>udiaeresis: string(0x9a) \n\
                        <Key>udiaeresis: string(0x81) \n\
                   Shift<Key>ssharp: string(0x3f) \n\
                    Meta<Key>ssharp: string(0x5c)  \n\
                        <Key>ssharp: string(0xe1)
         </verb>

<!--
         The only disadvantage is that you have to use <tt>Alt</tt> instead of
         <tt>AltGr</tt> to get the <tt>&bsol;</tt> Backslash (on a German
         Keyboard)
-->
この設定の唯一の短所は、(ドイツ語キーボードで)
<tt>&bsol;</tt> Backslash を入力する際に <tt>AltGr</tt> でなく
<tt>Alt</tt> を使わなければならないことです。

<!--
        You have to call your xpcterm with the option 
        <tt>-name XEga -fn ega</tt>
-->
xpcterm を起動するときには、オプション <tt>-name XEga -fn ega</tt> が
必要です。

<!--         
<item>Switching between X11R5 and X11R6 configuration<p>
-->
<item>X11R5 と X11R6 の間の設定切替え<p>
<!--
          to compile X11-Clients as either R6 or R5 clients,
          should be as easy as you only switch the PATH components
          so that either <tt>/usr/X11R6/bin/xmkmf</tt> or 
          <tt>/usr/X386/bin/xmkmf</tt> would make the new Makefile.
-->
X11 のクライアントを R6 または R5 のクライアントとしてコンパイルするこ
とは簡単なはずです。<tt>/usr/X11R6/bin/xmkmf</tt> と
<tt>/usr/X386/bin/xmkmf</tt> のうち使いたいほうが新しい Makefile を生
成するように、単に PATH 環境変数を切替えるだけです。

<!--
<item>ISC Streams Pipes <p>
-->
<item>ISC のストリームパイプ <p>
<!--
	      The old path to the pipes on ISC's R4 <tt>/tmp/.X11-unix</tt>
	      has changed to <tt>/dev/X/ISCCONN</tt>. For compatibility 
	      reasons on ISC, the pipes in the new directory will be
	      linked to a file inside the old. 
	      This will normally be a hard link, so it can't go across
	      filesystems. On ISC Version 4.x this is now allowed. But
	      you should use the new S5L on both filesystems.
	      ISC30 systems should take care that the two directories
	      are on the same FS. Else if you are using a ISC40 compiled
	      binary, the Server could maybe abort due to a SIGSYS.
              We tried to catch this signal, so if it dumps please send
              me a note.
-->
ISC における X11R4 のパイプへの古いパスであった
<tt>/tmp/.X11-unix</tt> は <tt>/dev/X/ISCCONN</tt> に変更されました。
ISC における互換性の理由により、新しいディレクトリ内のパイプは古いディ
レクトリ内のファイルへのリンクになっています。これは通常はハードリンク
なので、ファイルシステム間にまたがることはできません。ISC バージョン
4.x では、これは許されるようになりました。ただし、両方のファイルシステ
ムが新しい S5L ファイルシステムでなければなりません。ISC30 システムで
は 2 つのディレクトリが同じファイルシステム上になるよう注意しなければ
なりません。そうでない場合、ISC40 でコンパイルしたバイナリを使うと、サー
バが SIGSYS を受けて異常終了するかもしれません。筆者らはこのシグナルを
捕捉しようと試みているので、サーバがコアダンプしたらお知らせください。

<!--          
<item>Warnings you may see: <p>
-->
<item>出会うかもしれないウォーニング: <p>
   <itemize>
      <item>
<!--
           Since 3.2A, you could see a warning from pre X11R6.3 clients.<p>
           <verb>
           Warning: Unable to load any usable fontset
           </verb>
           The case are the new gzipped fonts, but the Warning isn't serious.<p>
-->
XFree86 3.2A 以降では、X11R6.3 以前のクライアントを使うと<p>
           <verb>
           Warning: Unable to load any usable fontset
           </verb>
というウォーニングが出るかもしれません。これはフォントが新たに gzip さ
れるようになったためですが、ウォーニングは深刻なものではありません。<p>
      <item>
<!--
           If you start a server you may see the following message:<p>
-->
サーバを起動しようとすると、次のメッセージが表示されるかもしれません:<p>
           <verb>
        _XSERVTransOpen: transport open failed for named/enigma:0
        _XSERVTransMakeAllCOTSServerListeners: failed to open listener for named
           </verb>
<!--
           This message either isn't critical. Interactive doesn't support this
           kind of connection.<p>
-->
このメッセージはいずれも致命的なものではありません。Interactive Unix
はこの種類の接続をサポートしていません。
   </itemize>

</itemize>


<!--                 
<sect> Acknowledgements <p>
-->
<sect> 謝辞 <p>

<!--
All thanks should go to the members of the 
<bf>XFree86 Team</bf> for their great work 
and the <bf>X Consortium</bf> for their Public Release of X11R6, 
as to all who contribute to this excellent piece of free software.
-->
素晴らしい仕事をした <bf>XFree86 チーム</bf>と X11R6 のパブリックリリー
スを出した <bf>X コンソーシアム</bf>、この素晴らしいフリーソフトウェア
に貢献した全ての方々に深く感謝します。

<verb>
$XFree86: xc/programs/Xserver/hw/xfree86/doc/Japanese/sgml/isc.sgml,v 1.1.2.2 1999/11/26 15:23:58 hohndel Exp $





$XConsortium: isc.sgml /main/8 1996/10/23 11:45:58 kaleb $
</verb>

</article>
