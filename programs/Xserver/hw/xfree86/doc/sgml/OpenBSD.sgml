<!DOCTYPE linuxdoc PUBLIC "-//XFree86//DTD linuxdoc//EN">

<article>
<title>README for XFree86 on OpenBSD
<author>
Matthieu Herrb
<Date>Last modified on: 20 August 1999

<toc>


<sect>What and Where is XFree86?

<p>
XFree86 is a port of X11R6.3 that supports several versions of
Intel-based Unix.  It is derived from X386 1.2, which was the X server
distributed with X11R5.  This release consists of many new features
and performance improvements as well as many bug fixes.  The release
is available as source patches against the X Consortium X11R6.3 code, as
well as binary distributions for many architectures.

See the <htmlurl url="COPYRIGHT.html" name="Copyright Notice">.

The sources for XFree86 are available by anonymous ftp from:

<htmlurl name="ftp://ftp.XFree86.org/pub/XFree86/current"
url="ftp://ftp.XFree86.org/pub/XFree86/current">

Binaries for OpenBSD 2.5 and later are available from:

<htmlurl name="ftp://ftp.XFree86.org/pub/XFree86/current/binaries/OpenBSD"
url="ftp://ftp.XFree86.org/pub/XFree86/current/binaries/OpenBSD">

A list of mirror sites is provided by
<htmlurl name="ftp://ftp.XFree86.org/pub/XFree86/MIRRORS"
url="ftp://ftp.XFree86.org/pub/XFree86/MIRRORS">

<p>

XFree86 also builds on other OpenBSD architectures. See section
<ref id="otherarch" name="Building on other architectures"> for details.


<sect>Bug Reports for This Document

<p>
Send email to <em/matthieu@laas.fr/ (Matthieu Herrb) or
<em/XFree86@XFree86.org/ if you have comments or suggestions about
this file and we'll revise it.

<sect>New OS-dependent features in this release
<p>
None. See the <htmlurl url="RELNOTES.html" name="Release Notes"> for
non-OS dependent new features in XFree86 3.3.5.

<sect>New OS-dependent features in XFree86 3.3.4
<p>
<itemize>
<item>The maximum number of open connections in the server has been
raised to 128,
<item>the <tt>resize</tt> utility was fixed.
</itemize>
<p>

<sect>Installing the Binaries

<p>
Refer to section 5 of the <htmlurl url="RELNOTES.html" name="Release
Notes">  for detailed installation instructions.

<sect>Configuring X for Your Hardware

<p>
The <tt>/etc/XF86Config</tt> file tells the X server what kind of
monitor, 
video card and mouse you have.  You <em/must/ create it to tell the
server what specific hardware you have.
<p>
The easiest way to create this file is to run the <bf/XF86Setup/
utility as root. Refer to <htmlurl url="QuickStart.html"
name="QuickStart.doc"> for details about its use.
<p>
You'll need info on your hardware:
<itemize>
<item>Your mouse type, baud rate and its /dev entry.
<item>The video card's chipset (e.g. ET4000, S3, etc).
<item>Your monitor's sync frequencies.
</itemize>

The recommended way to generate an <tt/XF86Config/ file is to use the
<tt/XF86Setup/ utility.  The xf86config text utility is still there
for the (few) cases where XF86Setup can't be used. Also, there is a
sample file installed as <tt>/usr/X11R6/lib/X11/XF86Config.eg</tt>,
which can be used as a starting point.

For details about the <tt/XF86Config/ file format, refer to the
<em>XF86Config(5)</em> manual page.

Once you've set up a XF86Config file, you can fine tune the video
modes with the <tt>xvidtune</tt> utility. 


<sect1>About mouse configuration

<p>
If your serial mouse does not work try using <tt>kermit</tt> or
<tt>tip</tt> to connect to the mouse serial port and verify that it
does indeed generate characters.
<p>
The OpenBSD pms driver  provides both ``raw'' and ``cooked''
(translated) modes.  ``raw'' mode does not do protocol translation, so
XFree86 would use the <bf>PS/2</bf> protocol for talking to the device
in that mode.  ``Cooked'' mode is the old BusMouse translation.
The driver runs in ``raw'' mode when using the <tt>/dev/psm0</tt>
device name.
<p>
On OpenBSD 2.2, only standard PS/2 mice are supported by this
driver. 
<p>
On OpenBSD 2.3 and later include there is support for recent PS/2 
mice that send more than three bytes at a time (especially
intellimouse, or mouseman+ with a "3D" roller). 
<p>
See <htmlurl url="mouse.html" name="README.mouse">  for general
instruction on mouse configuration in XFree86.

<sect1>Other input devices
<p>
XFree86  supports the dynamic loading of drivers for external
input devices using the <tt/XInput/ extension. Currently supported
devices are:
<itemize>
<item>Joystick (<tt/xf86Jstk.so/)
<item>Wacom tablets (Wacom IV protocol only, <tt/xf86Wacom.so/)
<item>SummaSketch tablets (<tt/xf86Summa.so/)
<item>Elographics touchscreen (<tt/xf86Elo.so/)
</itemize>

To use a specific device, add the line
<tscreen>
<tt/load/ <tt/"/<em/module/<tt/"/
</tscreen>
in the <bf/Module/ section of <tt/XF86Config/, where <em/module/ is
the name of the <tt/.so/ file corresponding to your device.
You also need to set up a <bf/XInput/ section in <tt/XF86Config/. 
Refer to the <em>XF86Config(5)</em> man page for detailed
configuration instructions.
<p>
You can then change the device used to drive the X pointer with the
<em/xsetpointer(1)/ command.
<p>
For joystick support, you'll need to enable the joystick device
driver in the kernel.  See <em/joy(4)/ for details.

<sect1>Configuring PEX and XIE extensions
<p>
The PEX and XIE extensions are  supported as external modules.
If you want to have access to these extensions, add the following
lines to the <bf/Module/ section of <tt/XF86Config/:
<tscreen><verb>
   load    "pex5.so"
   load    "xie.so"
</verb></tscreen>

<sect>Running X

<p>
8mb of memory is a recommended minimum for running X.  The server,
window manager and an xterm take about 4 Mb of memory themselves.  On
a 4Mb system that would leave nothing left over for other applications
like gcc that expect a few meg free.  X will work with 4Mb of memory,
but in practice compilation while running X can take 5 or 10 times as
long due to constant paging.


<sect1>Starting xdm, the display manager

<p>
To start the display manager, log in as root on the console and type:
``<tt/xdm -nodaemon/''.

You can start xdm automatically on bootup un-commenting the following
code in <tt>/etc/rc.local</tt>:

<tscreen><verb>
  if [ -x /usr/X11R6/bin/xdm ]; then
    echo -n ' xdm'; /usr/X11R6/bin/xdm
  fi
</verb></tscreen>

On the default OpenBSD 2.2 installation, you will need to create
the virtual console device for the X server:
<tscreen><verb>
cd /dev
 ./MAKEDEV ttyC5
</verb></tscreen>

<p>
Note that the binary distributions of XFree86 for OpenBSD don't include
support for the XDM-AUTHORIZATION-1 protocol. 

<sect1>Running X without the display manager
<p>
The easiest way for new users to start X windows is to type: ``<tt/startx
>&amp; startx.log/''.  Error messages are lost unless you redirect them
because the server takes over the screen.

To get out of X windows, type: ``<tt/exit/'' in the console xterm.
You can customize your X by creating <tt/.xinitrc/, <tt/.xserverrc/,
and <tt/.twmrc/ files in your home directory as described in the xinit
and startx man pages.

<sect>Kernel Support for X

<p>
To make sure X support is enabled under  OpenBSD, the following
line must be in your config file in <tt>/sys/arch/i386/conf</tt>:

<tscreen>
 options XSERVER
</tscreen>

<sect1>Console drivers
<p>
The server supports the two standard  OpenBSD/i386
console drivers: pccons and pcvt. They are detected at runtime and no
configuration of the server itself is required.

<p>
The pcvt console driver is the default in OpenBSD.  It offers
several virtual consoles and international keyboard support. 


<sect1>Aperture Driver
<p>
By default OpenBSD includes the BSD 4.4 kernel security
feature that disable access to the <tt>/dev/mem</tt> device when in
multi-users mode. But XFree86 servers can take advantage (or require)
linear access to the display memory.

The P9000, Mach64 and AGX servers require linear memory access, other
accelerated servers can take advantage of it, but do not require it.
Some drivers in the SVGA server require linear memory access too,
notably the Matrox driver.

The preferred  way to allow XFree86 to access linear memory is to use
the aperture driver 

Ths step is highly dependent from your exact operating
system version:
<itemize>
<item> OpenBSD 2.0
    
Use the aperture driver from /usr/lkm: 
    
add the following lines to the end of <tt>/etc/rc.local</tt>:
<tscreen><verb>
 KERNDIR=/usr/lkm
 if [ -f ${KERNDIR}/ap.o ]; then
   modload -o ${KERNDIR}/ap -e ap -p \
   ${KERNDIR}/apinstall ${KERNDIR}/ap.o
 fi
</verb></tscreen>

<item> OpenBSD 2.1, 2.2
    
Uncomment the lines loading the aperture driver from
<tt>/etc/rc.securelevel</tt> 

<item> OpenBSD 2.3
     
The aperture driver is part of the kernel.  Add 'option APERTURE' to
your kernel configuration file, build and install the new kernel and
run <tt>./MAKEDEV std</tt> in <tt>/dev</tt>. Edit
<tt>/etc/sysctl.conf</tt> to set the variable
<bf>machdep.allowaperture</bf> to 1.

<item> OpenBSD 2.4 and later

OpenBSD now requires the aperture driver to be enabled for all X
servers, because the aperture driver also controls access to the
I/O ports of the video boards.

</itemize>

After doing that, reboot your system. XFree86 will auto-detect the
aperture driver if available.

<p>
<bf/Warning:/ if you boot another kernel than <tt>/bsd</tt>,
loadable kernel modules can crash your system. Always boot in
single user mode when you want to run another kernel.

<p>
<quote>
<bf/Caveat:/ the aperture driver only allows one access at a time
(so that the system is in the same security state once X is
launched). This means that if you run multiple servers on multiples
VT, only the first one will have linear memory access.  Use 'option
INSECURE' if you need more that one X server at a time.
</quote>


Another (less recommended) way to enable linear memory access is to
disable the kernel security feature by adding ``option INSECURE'' in
your kernel configuration file and build a new kernel.  In OpenBSD 2.2
and later, you will also need to comment out the line initializing
<tt/securelevel/ to 1 in <tt>/etc/rc.securelevel</tt>.

<sect1>MIT-SHM
<p>
OpenBSD supports System V shared memory. If XFree86 
detects this support in your kernel, it will support the MIT-SHM
extension.

To add support for system V shared memory to your kernel add the
lines:

<tscreen><verb>
 # System V-like IPC
 options         SYSVMSG
 options         SYSVSEM
 options         SYSVSHM
</verb></tscreen>
 
to your kernel config file. 

<sect> Rebuilding the XFree86 Distribution

<p>
The server link kit allow you to rebuild just the X server with a
minimum amount of disk space.  Just unpack it, make the appropriate
changes to the <tt/xf86site.def/, type ``<tt>./mkmf</tt>'' and
``<tt/make/'' to link the server.  See <tt>/usr/X11R6/lib/Server/README</tt>
for more info.

See <htmlurl url="INSTALL.html" name="INSTALL"> for instructions on
unbundling and building the source distribution.

You should configure the distribution by editing
<tt>xc/config/cf/host.def</tt>  before compiling.  To compile the
sources, invoke ``<tt/make World/'' in the xc directory.

<sect1>Console drivers<label id="console-drivers">

<p>
XFree86 has a configuration option to select the console
drivers to use in <tt/xf86site.def/:
<itemize>
<item> if you're using pccons only put:
<tscreen><verb>
 #define XFree86ConsoleDefines -DPCCONS_SUPPORT
</verb></tscreen>
<item>if you're using pcvt only put:
<tscreen><verb>
 #define XFree86ConsoleDefines -DPCVT_SUPPORT
</verb></tscreen>
</itemize>
If you don't define <bf/XFree86ConsoleDefines/ in <tt/xf86site.def/ the
pccons and pcvt drivers will be supported.



<sect1>Building on other architectures<label id="otherarch">

<p>
XFree86 also compiles on other OpenBSD architectures. 

The XFree86 servers can also been built on OpenBSD/mips. The S3 server
has been tested on an Acer Mips system with a S3/928 board. Contact
Per Fogelstrom (pefo@OpenBSD.org) for details.

The Xsun server patches from Dennis Ferguson and Matthew Green for
NetBSD have been integrated in
<tt>xc/programs/Xserver/hw/sun</tt>. The Xsun server can be built on
the sparc and the sun3.

The client side of XFree86 also builds on the alpha, pmax, amiga,
mac68k and mvme68k architectures.

Problems with this port should be reported directly to the OpenBSD 
mailing lists rather than to the xfree86 mailing list. 

<p> 
Note that OpenBSD project has now its own source tree, based on
the XFree86 source tree, with some local modifications. You may want
to start with this tree to rebuild from sources.  The OpenBSD X11
source tree is available by anoncvs from all OpenBSD anoncvs
servers. See <htmlurl url="http://www.openbsd.org/anoncvs.html"
name="http://www.openbsd.org/anoncvs.html"> for details on anoncvs.


<sect>Building New X Clients

<p>
The easiest way to build a new client (X application) is to use
<tt/xmkmf/ if an <tt/Imakefile/ is included in the sources.  Type
``<tt/xmkmf -a/'' to create the Makefiles, check the configuration if
necessary and type ``<tt/make/''.  Whenever you install additional man
pages you should update <tt/whatis.db/ by running ``<tt>makewhatis
/usr/X11R6/man</tt>''.


<verb>
$XFree86: xc/programs/Xserver/hw/xfree86/doc/sgml/OpenBSD.sgml,v 1.1.2.11 1999/08/23 08:49:49 hohndel Exp $





$XConsortium$
</verb>

</article>
